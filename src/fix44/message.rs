use types::*;
use fix44::fields::*;

pub struct Header {
    pub sender_comp_id: FIXString,
    pub target_comp_id: FIXString,
    pub on_behalf_of_comp_id: Option<FIXString>,
    pub deliver_to_comp_id: Option<FIXString>,
    pub secure_data_len: Option<Length>,
    pub secure_data: Option<Data>,
    pub msg_seq_num: SeqNum,
    pub sender_sub_id: Option<FIXString>,
    pub sender_location_id: Option<FIXString>,
    pub target_sub_id: Option<FIXString>,
    pub target_location_id: Option<FIXString>,
    pub on_behalf_of_sub_id: Option<FIXString>,
    pub on_behalf_of_location_id: Option<FIXString>,
    pub deliver_to_sub_id: Option<FIXString>,
    pub deliver_to_location_id: Option<FIXString>,
    pub poss_dup_flag: Option<PossDupFlag>,
    pub poss_resend: Option<PossResend>,
    pub orig_sending_time: Option<UTCTimestamp>,
    pub xml_data: Option<Data>,
    pub message_encoding: Option<MessageEncoding>,
    pub last_msg_seq_num_processed: Option<SeqNum>,
    pub hop: Option<Hop>
}

pub struct Message {
    /// Standard message header.
    pub header: Header,
    /// Message body
    pub body: MessageBody,
}

pub enum MessageBody {
    /// Heartbeat message. Message code: 0
    Heartbeat {
        test_req_id: Option<FIXString>
    },

    /// TestRequest message. Message code: 1
    TestRequest {
        test_req_id: FIXString
    },

    /// ResendRequest message. Message code: 2
    ResendRequest {
        begin_seq_no: SeqNum,
        end_seq_no: SeqNum
    },

    /// Reject message. Message code: 3
    Reject {
        ref_seq_num: SeqNum,
        ref_tag_id: Option<FIXInt>,
        ref_msg_type: Option<FIXString>,
        session_reject_reason: Option<SessionRejectReason>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// SequenceReset message. Message code: 4
    SequenceReset {
        gap_fill_flag: Option<GapFillFlag>,
        new_seq_no: SeqNum
    },

    /// Logout message. Message code: 5
    Logout {
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// IOI message. Message code: 6
    IOI {
        ioiid: FIXString,
        ioi_trans_type: IOITransType,
        ioi_ref_id: Option<FIXString>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Side,
        qty_type: Option<QtyType>,
        order_qty_data: Option<OrderQtyData>,
        ioi_qty: IOIQty,
        currency: Option<Currency>,
        stipulations: Option<Stipulations>,
        instrmt_leg_ioi_grp: Option<InstrmtLegIOIGrp>,
        price_type: Option<PriceType>,
        price: Option<Price>,
        valid_until_time: Option<UTCTimestamp>,
        ioi_qlty_ind: Option<IOIQltyInd>,
        ioi_natural_flag: Option<IOINaturalFlag>,
        ioi_qual_grp: Option<IOIQualGrp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        transact_time: Option<UTCTimestamp>,
        url_link: Option<FIXString>,
        routing_grp: Option<RoutingGrp>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>
    },

    /// Advertisement message. Message code: 7
    Advertisement {
        adv_id: FIXString,
        adv_trans_type: AdvTransType,
        adv_ref_id: Option<FIXString>,
        instrument: Instrument,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        adv_side: AdvSide,
        quantity: Qty,
        qty_type: Option<QtyType>,
        price: Option<Price>,
        currency: Option<Currency>,
        trade_date: Option<LocalMktDate>,
        transact_time: Option<UTCTimestamp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        url_link: Option<FIXString>,
        last_mkt: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>
    },

    /// ExecutionReport message. Message code: 8
    ExecutionReport {
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        secondary_exec_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        orig_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        quote_resp_id: Option<FIXString>,
        ord_status_req_id: Option<FIXString>,
        mass_status_req_id: Option<FIXString>,
        tot_num_reports: Option<FIXInt>,
        last_rpt_requested: Option<FIXBoolean>,
        parties: Option<Parties>,
        trade_origination_date: Option<LocalMktDate>,
        contra_grp: Option<ContraGrp>,
        list_id: Option<FIXString>,
        cross_id: Option<FIXString>,
        orig_cross_id: Option<FIXString>,
        cross_type: Option<CrossType>,
        exec_id: FIXString,
        exec_ref_id: Option<FIXString>,
        exec_type: ExecType,
        ord_status: OrdStatus,
        working_indicator: Option<WorkingIndicator>,
        ord_rej_reason: Option<OrdRejReason>,
        exec_restatement_reason: Option<ExecRestatementReason>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Side,
        stipulations: Option<Stipulations>,
        qty_type: Option<QtyType>,
        order_qty_data: Option<OrderQtyData>,
        ord_type: Option<OrdType>,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        peg_instructions: Option<PegInstructions>,
        discretion_instructions: Option<DiscretionInstructions>,
        pegged_price: Option<Price>,
        discretion_price: Option<Price>,
        target_strategy: Option<TargetStrategy>,
        target_strategy_parameters: Option<FIXString>,
        participation_rate: Option<Percentage>,
        target_strategy_performance: Option<FIXFloat>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        exec_inst: Option<ExecInst>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<CustOrderCapacity>,
        last_qty: Option<Qty>,
        underlying_last_qty: Option<Qty>,
        last_px: Option<Price>,
        underlying_last_px: Option<Price>,
        last_par_px: Option<Price>,
        last_spot_rate: Option<Price>,
        last_forward_points: Option<PriceOffset>,
        last_mkt: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        time_bracket: Option<FIXString>,
        last_capacity: Option<LastCapacity>,
        leaves_qty: Qty,
        cum_qty: Qty,
        avg_px: Price,
        day_order_qty: Option<Qty>,
        day_cum_qty: Option<Qty>,
        day_avg_px: Option<Price>,
        gt_booking_inst: Option<GTBookingInst>,
        trade_date: Option<LocalMktDate>,
        transact_time: Option<UTCTimestamp>,
        report_to_exch: Option<ReportToExch>,
        commission_data: Option<CommissionData>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        gross_trade_amt: Option<Amt>,
        num_days_interest: Option<FIXInt>,
        ex_date: Option<LocalMktDate>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        interest_at_maturity: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        traded_flat_switch: Option<TradedFlatSwitch>,
        basis_feature_date: Option<LocalMktDate>,
        basis_feature_price: Option<Price>,
        concession: Option<Amt>,
        total_takedown: Option<Amt>,
        net_money: Option<Amt>,
        settl_curr_amt: Option<Amt>,
        settl_currency: Option<Currency>,
        settl_curr_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        handl_inst: Option<HandlInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        position_effect: Option<PositionEffect>,
        max_show: Option<Qty>,
        booking_type: Option<BookingType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        settl_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        last_forward_points2: Option<PriceOffset>,
        multi_leg_reporting_type: Option<MultiLegReportingType>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        trans_bkd_time: Option<UTCTimestamp>,
        exec_valuation_point: Option<UTCTimestamp>,
        exec_price_type: Option<ExecPriceType>,
        exec_price_adjustment: Option<FIXFloat>,
        priority_indicator: Option<PriorityIndicator>,
        price_improvement: Option<PriceOffset>,
        last_liquidity_ind: Option<LastLiquidityInd>,
        cont_amt_grp: Option<ContAmtGrp>,
        instrmt_leg_exec_grp: Option<InstrmtLegExecGrp>,
        copy_msg_indicator: Option<FIXBoolean>,
        misc_fees_grp: Option<MiscFeesGrp>
    },

    /// OrderCancelReject message. Message code: 9
    OrderCancelReject {
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_id: FIXString,
        cl_ord_link_id: Option<FIXString>,
        orig_cl_ord_id: FIXString,
        ord_status: OrdStatus,
        working_indicator: Option<WorkingIndicator>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        list_id: Option<FIXString>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        trade_origination_date: Option<LocalMktDate>,
        trade_date: Option<LocalMktDate>,
        transact_time: Option<UTCTimestamp>,
        cxl_rej_response_to: CxlRejResponseTo,
        cxl_rej_reason: Option<CxlRejReason>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// Logon message. Message code: A
    Logon {
        encrypt_method: EncryptMethod,
        heart_bt_int: FIXInt,
        raw_data_length: Option<Length>,
        raw_data: Option<Data>,
        reset_seq_num_flag: Option<ResetSeqNumFlag>,
        next_expected_msg_seq_num: Option<SeqNum>,
        max_message_size: Option<Length>,
        ref_msg_type: Option<FIXString>,
        msg_direction: Option<MsgDirection>,
        test_message_indicator: Option<TestMessageIndicator>,
        username: Option<FIXString>,
        password: Option<FIXString>
    },

    /// News message. Message code: B
    News {
        orig_time: Option<UTCTimestamp>,
        urgency: Option<Urgency>,
        headline: FIXString,
        encoded_headline: Option<Data>,
        routing_grp: Option<RoutingGrp>,
        instrmt_grp: Option<InstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        lines_of_text_grp: LinesOfTextGrp,
        url_link: Option<FIXString>,
        raw_data_length: Option<Length>,
        raw_data: Option<Data>
    },

    /// Email message. Message code: C
    Email {
        email_thread_id: FIXString,
        email_type: EmailType,
        orig_time: Option<UTCTimestamp>,
        subject: FIXString,
        encoded_subject_len: Option<Length>,
        encoded_subject: Option<Data>,
        routing_grp: Option<RoutingGrp>,
        instrmt_grp: Option<InstrmtGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        order_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        lines_of_text_grp: LinesOfTextGrp,
        raw_data_length: Option<Length>,
        raw_data: Option<Data>
    },

    /// NewOrderSingle message. Message code: D
    NewOrderSingle {
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        trade_origination_date: Option<LocalMktDate>,
        trade_date: Option<LocalMktDate>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_id: Option<FIXString>,
        pre_alloc_grp: Option<PreAllocGrp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: Option<HandlInst>,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        process_code: Option<ProcessCode>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        prev_close_px: Option<Price>,
        side: Side,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        stipulations: Option<Stipulations>,
        qty_type: Option<QtyType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        ioiid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<CustOrderCapacity>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        booking_type: Option<BookingType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        settl_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        price2: Option<Price>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        peg_instructions: Option<PegInstructions>,
        discretion_instructions: Option<DiscretionInstructions>,
        target_strategy: Option<TargetStrategy>,
        target_strategy_parameters: Option<FIXString>,
        participation_rate: Option<Percentage>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>
    },

    /// NewOrderList message. Message code: E
    NewOrderList {
        list_id: FIXString,
        bid_id: Option<FIXString>,
        client_bid_id: Option<FIXString>,
        prog_rpt_reqs: Option<ProgRptReqs>,
        bid_type: BidType,
        prog_period_interval: Option<FIXInt>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        list_exec_inst_type: Option<ListExecInstType>,
        list_exec_inst: Option<FIXString>,
        encoded_list_exec_inst: Option<Data>,
        allowable_one_sidedness_pct: Option<Percentage>,
        allowable_one_sidedness_value: Option<Amt>,
        allowable_one_sidedness_curr: Option<Currency>,
        tot_no_orders: FIXInt,
        last_fragment: Option<LastFragment>,
        list_ord_grp: ListOrdGrp
    },

    /// OrderCancelRequest message. Message code: F
    OrderCancelRequest {
        orig_cl_ord_id: FIXString,
        order_id: Option<FIXString>,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        list_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        parties: Option<Parties>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Side,
        transact_time: UTCTimestamp,
        order_qty_data: OrderQtyData,
        compliance_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// OrderCancelReplaceRequest message. Message code: G
    OrderCancelReplaceRequest {
        order_id: Option<FIXString>,
        parties: Option<Parties>,
        trade_origination_date: Option<LocalMktDate>,
        trade_date: Option<LocalMktDate>,
        orig_cl_ord_id: FIXString,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        list_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_id: Option<FIXString>,
        pre_alloc_grp: Option<PreAllocGrp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: Option<HandlInst>,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Side,
        transact_time: UTCTimestamp,
        qty_type: Option<QtyType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        peg_instructions: Option<PegInstructions>,
        discretion_instructions: Option<DiscretionInstructions>,
        target_strategy: Option<TargetStrategy>,
        target_strategy_parameters: Option<FIXString>,
        participation_rate: Option<Percentage>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        currency: Option<Currency>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<CustOrderCapacity>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        booking_type: Option<BookingType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        settl_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        price2: Option<Price>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        locate_reqd: Option<LocateReqd>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>
    },

    /// OrderStatusRequest message. Message code: H
    OrderStatusRequest {
        order_id: Option<FIXString>,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        ord_status_req_id: Option<FIXString>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Side
    },

    /// AllocationInstruction message. Message code: J
    AllocationInstruction {
        alloc_id: FIXString,
        alloc_trans_type: AllocTransType,
        alloc_type: AllocType,
        secondary_alloc_id: Option<FIXString>,
        ref_alloc_id: Option<FIXString>,
        alloc_canc_replace_reason: Option<AllocCancReplaceReason>,
        alloc_intermed_req_type: Option<AllocIntermedReqType>,
        alloc_link_id: Option<FIXString>,
        alloc_link_type: Option<AllocLinkType>,
        booking_ref_id: Option<FIXString>,
        alloc_no_orders_type: AllocNoOrdersType,
        ord_alloc_grp: Option<OrdAllocGrp>,
        exec_alloc_grp: Option<ExecAllocGrp>,
        previously_reported: Option<PreviouslyReported>,
        reversal_indicator: Option<FIXBoolean>,
        match_type: Option<MatchType>,
        side: Side,
        instrument: Instrument,
        instrument_extension: Option<InstrumentExtension>,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        quantity: Qty,
        qty_type: Option<QtyType>,
        last_mkt: Option<MICExchange>,
        trade_origination_date: Option<LocalMktDate>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        price_type: Option<PriceType>,
        avg_px: Price,
        avg_par_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        currency: Option<Currency>,
        avg_px_precision: Option<FIXInt>,
        parties: Option<Parties>,
        trade_date: LocalMktDate,
        transact_time: Option<UTCTimestamp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        booking_type: Option<BookingType>,
        gross_trade_amt: Option<Amt>,
        concession: Option<Amt>,
        total_takedown: Option<Amt>,
        net_money: Option<Amt>,
        position_effect: Option<PositionEffect>,
        auto_accept_indicator: Option<FIXBoolean>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        num_days_interest: Option<FIXInt>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        total_accrued_interest_amt: Option<Amt>,
        interest_at_maturity: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        legal_confirm: Option<LegalConfirm>,
        stipulations: Option<Stipulations>,
        yield_data: Option<YieldData>,
        tot_no_allocs: Option<FIXInt>,
        last_fragment: Option<LastFragment>,
        alloc_grp: Option<AllocGrp>
    },

    /// ListCancelRequest message. Message code: K
    ListCancelRequest {
        list_id: FIXString,
        transact_time: UTCTimestamp,
        trade_origination_date: Option<LocalMktDate>,
        trade_date: Option<LocalMktDate>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ListExecute message. Message code: L
    ListExecute {
        list_id: FIXString,
        client_bid_id: Option<FIXString>,
        bid_id: Option<FIXString>,
        transact_time: UTCTimestamp,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ListStatusRequest message. Message code: M
    ListStatusRequest {
        list_id: FIXString,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ListStatus message. Message code: N
    ListStatus {
        list_id: FIXString,
        list_status_type: ListStatusType,
        no_rpts: FIXInt,
        list_order_status: ListOrderStatus,
        rpt_seq: FIXInt,
        list_status_text: Option<FIXString>,
        encoded_list_status_text_len: Option<Length>,
        encoded_list_status_text: Option<Data>,
        transact_time: Option<UTCTimestamp>,
        tot_no_orders: FIXInt,
        last_fragment: Option<LastFragment>,
        ord_list_stat_grp: OrdListStatGrp
    },

    /// AllocationInstructionAck message. Message code: P
    AllocationInstructionAck {
        alloc_id: FIXString,
        parties: Option<Parties>,
        secondary_alloc_id: Option<FIXString>,
        trade_date: Option<LocalMktDate>,
        transact_time: UTCTimestamp,
        alloc_status: AllocStatus,
        alloc_rej_code: Option<AllocRejCode>,
        alloc_type: Option<AllocType>,
        alloc_intermed_req_type: Option<AllocIntermedReqType>,
        match_status: Option<MatchStatus>,
        product: Option<Product>,
        security_type: Option<SecurityType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        alloc_ack_grp: Option<AllocAckGrp>
    },

    /// DontKnowTrade message. Message code: Q
    DontKnowTrade {
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        exec_id: FIXString,
        dk_reason: DKReason,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        side: Side,
        order_qty_data: OrderQtyData,
        last_qty: Option<Qty>,
        last_px: Option<Price>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// QuoteRequest message. Message code: R
    QuoteRequest {
        quote_req_id: FIXString,
        rfq_req_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        order_capacity: Option<OrderCapacity>,
        quot_req_grp: QuotReqGrp,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// Quote message. Message code: S
    Quote {
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_resp_id: Option<FIXString>,
        quote_type: Option<QuoteType>,
        quot_qual_grp: Option<QuotQualGrp>,
        quote_response_level: Option<QuoteResponseLevel>,
        parties: Option<Parties>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Option<Side>,
        order_qty_data: Option<OrderQtyData>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        settl_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        currency: Option<Currency>,
        stipulations: Option<Stipulations>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        leg_quot_grp: Option<LegQuotGrp>,
        bid_px: Option<Price>,
        offer_px: Option<Price>,
        mkt_bid_px: Option<Price>,
        mkt_offer_px: Option<Price>,
        min_bid_size: Option<Qty>,
        bid_size: Option<Qty>,
        min_offer_size: Option<Qty>,
        offer_size: Option<Qty>,
        valid_until_time: Option<UTCTimestamp>,
        bid_spot_rate: Option<Price>,
        offer_spot_rate: Option<Price>,
        bid_forward_points: Option<PriceOffset>,
        offer_forward_points: Option<PriceOffset>,
        mid_px: Option<Price>,
        bid_yield: Option<Percentage>,
        mid_yield: Option<Percentage>,
        offer_yield: Option<Percentage>,
        transact_time: Option<UTCTimestamp>,
        ord_type: Option<OrdType>,
        bid_forward_points2: Option<PriceOffset>,
        offer_forward_points2: Option<PriceOffset>,
        settl_curr_bid_fx_rate: Option<FIXFloat>,
        settl_curr_offer_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        comm_type: Option<CommType>,
        commission: Option<Amt>,
        cust_order_capacity: Option<CustOrderCapacity>,
        ex_destination: Option<MICExchange>,
        order_capacity: Option<OrderCapacity>,
        price_type: Option<PriceType>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// SettlementInstructions message. Message code: T
    SettlementInstructions {
        settl_inst_msg_id: FIXString,
        settl_inst_req_id: Option<FIXString>,
        settl_inst_mode: SettlInstMode,
        settl_inst_req_rej_code: Option<SettlInstReqRejCode>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        cl_ord_id: Option<FIXString>,
        transact_time: UTCTimestamp,
        settl_inst_grp: Option<SettlInstGrp>
    },

    /// MarketDataRequest message. Message code: V
    MarketDataRequest {
        md_req_id: FIXString,
        subscription_request_type: SubscriptionRequestType,
        market_depth: FIXInt,
        md_update_type: Option<MDUpdateType>,
        aggregated_book: Option<AggregatedBook>,
        open_close_settl_flag: Option<OpenCloseSettlFlag>,
        scope: Option<Scope>,
        md_implicit_delete: Option<MDImplicitDelete>,
        md_req_grp: MDReqGrp,
        instrmt_md_req_grp: InstrmtMDReqGrp,
        trdg_ses_grp: Option<TrdgSesGrp>,
        appl_queue_action: Option<ApplQueueAction>,
        appl_queue_max: Option<FIXInt>
    },

    /// MarketDataSnapshotFullRefresh message. Message code: W
    MarketDataSnapshotFullRefresh {
        md_req_id: Option<FIXString>,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        financial_status: Option<FinancialStatus>,
        corporate_action: Option<CorporateAction>,
        net_chg_prev_day: Option<PriceOffset>,
        md_full_grp: MDFullGrp,
        appl_queue_depth: Option<FIXInt>,
        appl_queue_resolution: Option<ApplQueueResolution>
    },

    /// MarketDataIncrementalRefresh message. Message code: X
    MarketDataIncrementalRefresh {
        md_req_id: Option<FIXString>,
        md_inc_grp: MDIncGrp,
        appl_queue_depth: Option<FIXInt>,
        appl_queue_resolution: Option<ApplQueueResolution>
    },

    /// MarketDataRequestReject message. Message code: Y
    MarketDataRequestReject {
        md_req_id: FIXString,
        md_req_rej_reason: Option<MDReqRejReason>,
        md_rjct_grp: Option<MDRjctGrp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// QuoteCancel message. Message code: Z
    QuoteCancel {
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_cancel_type: QuoteCancelType,
        quote_response_level: Option<QuoteResponseLevel>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        quot_cxl_entries_grp: Option<QuotCxlEntriesGrp>
    },

    /// QuoteStatusRequest message. Message code: a
    QuoteStatusRequest {
        quote_status_req_id: Option<FIXString>,
        quote_id: Option<FIXString>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// MassQuoteAcknowledgement message. Message code: b
    MassQuoteAcknowledgement {
        quote_req_id: Option<FIXString>,
        quote_id: Option<FIXString>,
        quote_status: QuoteStatus,
        quote_reject_reason: Option<QuoteRejectReason>,
        quote_response_level: Option<QuoteResponseLevel>,
        quote_type: Option<QuoteType>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        quot_set_ack_grp: Option<QuotSetAckGrp>
    },

    /// SecurityDefinitionRequest message. Message code: c
    SecurityDefinitionRequest {
        security_req_id: FIXString,
        security_request_type: SecurityRequestType,
        instrument: Option<Instrument>,
        instrument_extension: Option<InstrumentExtension>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        expiration_cycle: Option<ExpirationCycle>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// SecurityDefinition message. Message code: d
    SecurityDefinition {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_response_type: SecurityResponseType,
        instrument: Option<Instrument>,
        instrument_extension: Option<InstrumentExtension>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        currency: Option<Currency>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        expiration_cycle: Option<ExpirationCycle>,
        round_lot: Option<Qty>,
        min_trade_vol: Option<Qty>
    },

    /// SecurityStatusRequest message. Message code: e
    SecurityStatusRequest {
        security_status_req_id: FIXString,
        instrument: Instrument,
        instrument_extension: Option<InstrumentExtension>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        currency: Option<Currency>,
        subscription_request_type: SubscriptionRequestType,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>
    },

    /// SecurityStatus message. Message code: f
    SecurityStatus {
        security_status_req_id: Option<FIXString>,
        instrument: Instrument,
        instrument_extension: Option<InstrumentExtension>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        currency: Option<Currency>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        unsolicited_indicator: Option<UnsolicitedIndicator>,
        security_trading_status: Option<SecurityTradingStatus>,
        financial_status: Option<FinancialStatus>,
        corporate_action: Option<CorporateAction>,
        halt_reason_char: Option<HaltReasonChar>,
        in_view_of_common: Option<InViewOfCommon>,
        due_to_related: Option<DueToRelated>,
        buy_volume: Option<Qty>,
        sell_volume: Option<Qty>,
        high_px: Option<Price>,
        low_px: Option<Price>,
        last_px: Option<Price>,
        transact_time: Option<UTCTimestamp>,
        adjustment: Option<Adjustment>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// TradingSessionStatusRequest message. Message code: g
    TradingSessionStatusRequest {
        trad_ses_req_id: FIXString,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        trad_ses_method: Option<TradSesMethod>,
        trad_ses_mode: Option<TradSesMode>,
        subscription_request_type: SubscriptionRequestType
    },

    /// TradingSessionStatus message. Message code: h
    TradingSessionStatus {
        trad_ses_req_id: Option<FIXString>,
        trading_session_id: FIXString,
        trading_session_sub_id: Option<FIXString>,
        trad_ses_method: Option<TradSesMethod>,
        trad_ses_mode: Option<TradSesMode>,
        unsolicited_indicator: Option<UnsolicitedIndicator>,
        trad_ses_status: TradSesStatus,
        trad_ses_status_rej_reason: Option<TradSesStatusRejReason>,
        trad_ses_start_time: Option<UTCTimestamp>,
        trad_ses_open_time: Option<UTCTimestamp>,
        trad_ses_pre_close_time: Option<UTCTimestamp>,
        trad_ses_close_time: Option<UTCTimestamp>,
        trad_ses_end_time: Option<UTCTimestamp>,
        total_volume_traded: Option<Qty>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// MassQuote message. Message code: i
    MassQuote {
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_type: Option<QuoteType>,
        quote_response_level: Option<QuoteResponseLevel>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        def_bid_size: Option<Qty>,
        def_offer_size: Option<Qty>,
        quot_set_grp: QuotSetGrp
    },

    /// BusinessMessageReject message. Message code: j
    BusinessMessageReject {
        ref_seq_num: Option<SeqNum>,
        ref_msg_type: FIXString,
        business_reject_ref_id: Option<FIXString>,
        business_reject_reason: BusinessRejectReason,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// BidRequest message. Message code: k
    BidRequest {
        bid_id: Option<FIXString>,
        client_bid_id: FIXString,
        bid_request_trans_type: BidRequestTransType,
        list_name: Option<FIXString>,
        tot_no_related_sym: FIXInt,
        bid_type: BidType,
        num_tickets: Option<FIXInt>,
        currency: Option<Currency>,
        side_value1: Option<Amt>,
        side_value2: Option<Amt>,
        bid_desc_req_grp: Option<BidDescReqGrp>,
        bid_comp_req_grp: Option<BidCompReqGrp>,
        liquidity_ind_type: Option<LiquidityIndType>,
        wt_average_liquidity: Option<Percentage>,
        exchange_for_physical: Option<ExchangeForPhysical>,
        out_main_cntry_u_index: Option<Amt>,
        cross_percent: Option<Percentage>,
        prog_rpt_reqs: Option<ProgRptReqs>,
        prog_period_interval: Option<FIXInt>,
        inc_tax_ind: Option<IncTaxInd>,
        forex_req: Option<ForexReq>,
        num_bidders: Option<FIXInt>,
        trade_date: Option<LocalMktDate>,
        bid_trade_type: BidTradeType,
        basis_px_type: BasisPxType,
        strike_time: Option<UTCTimestamp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// BidResponse message. Message code: l
    BidResponse {
        bid_id: Option<FIXString>,
        client_bid_id: Option<FIXString>,
        bid_comp_rsp_grp: BidCompRspGrp
    },

    /// ListStrikePrice message. Message code: m
    ListStrikePrice {
        list_id: FIXString,
        tot_no_strikes: FIXInt,
        last_fragment: Option<LastFragment>,
        instrmt_strk_px_grp: InstrmtStrkPxGrp,
        und_instrmt_strk_px_grp: Option<UndInstrmtStrkPxGrp>
    },

    /// XMLnonFIX message. Message code: n    XMLnonFIX,

    /// RegistrationInstructions message. Message code: o
    RegistrationInstructions {
        regist_id: FIXString,
        regist_trans_type: RegistTransType,
        regist_ref_id: FIXString,
        cl_ord_id: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        regist_acct_type: Option<FIXString>,
        tax_advantage_type: Option<TaxAdvantageType>,
        ownership_type: Option<OwnershipType>,
        rgst_dtls_grp: Option<RgstDtlsGrp>,
        rgst_dist_inst_grp: Option<RgstDistInstGrp>
    },

    /// RegistrationInstructionsResponse message. Message code: p
    RegistrationInstructionsResponse {
        regist_id: FIXString,
        regist_trans_type: RegistTransType,
        regist_ref_id: FIXString,
        cl_ord_id: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        regist_status: RegistStatus,
        regist_rej_reason_code: Option<RegistRejReasonCode>,
        regist_rej_reason_text: Option<FIXString>
    },

    /// OrderMassCancelRequest message. Message code: q
    OrderMassCancelRequest {
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        mass_cancel_request_type: MassCancelRequestType,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Option<Instrument>,
        underlying_instrument: Option<UnderlyingInstrument>,
        side: Option<Side>,
        transact_time: UTCTimestamp,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// OrderMassCancelReport message. Message code: r
    OrderMassCancelReport {
        cl_ord_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        mass_cancel_request_type: MassCancelRequestType,
        mass_cancel_response: MassCancelResponse,
        mass_cancel_reject_reason: Option<MassCancelRejectReason>,
        total_affected_orders: Option<FIXInt>,
        affected_ord_grp: Option<AffectedOrdGrp>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Option<Instrument>,
        underlying_instrument: Option<UnderlyingInstrument>,
        side: Option<Side>,
        transact_time: Option<UTCTimestamp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// NewOrderCross message. Message code: s
    NewOrderCross {
        cross_id: FIXString,
        cross_type: CrossType,
        cross_prioritization: CrossPrioritization,
        side_cross_ord_mod_grp: SideCrossOrdModGrp,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        handl_inst: Option<HandlInst>,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        process_code: Option<ProcessCode>,
        prev_close_px: Option<Price>,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        stipulations: Option<Stipulations>,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        ioiid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        max_show: Option<Qty>,
        peg_instructions: Option<PegInstructions>,
        discretion_instructions: Option<DiscretionInstructions>,
        target_strategy: Option<TargetStrategy>,
        target_strategy_parameters: Option<FIXString>,
        participation_rate: Option<Percentage>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>
    },

    /// CrossOrderCancelReplaceRequest message. Message code: t
    CrossOrderCancelReplaceRequest {
        order_id: Option<FIXString>,
        cross_id: FIXString,
        orig_cross_id: FIXString,
        cross_type: CrossType,
        cross_prioritization: CrossPrioritization,
        side_cross_ord_mod_grp: SideCrossOrdModGrp,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        handl_inst: Option<HandlInst>,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        process_code: Option<ProcessCode>,
        prev_close_px: Option<Price>,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        stipulations: Option<Stipulations>,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        ioiid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        max_show: Option<Qty>,
        peg_instructions: Option<PegInstructions>,
        discretion_instructions: Option<DiscretionInstructions>,
        target_strategy: Option<TargetStrategy>,
        target_strategy_parameters: Option<FIXString>,
        participation_rate: Option<Percentage>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>
    },

    /// CrossOrderCancelRequest message. Message code: u
    CrossOrderCancelRequest {
        order_id: Option<FIXString>,
        cross_id: FIXString,
        orig_cross_id: FIXString,
        cross_type: CrossType,
        cross_prioritization: CrossPrioritization,
        side_cross_ord_cxl_grp: SideCrossOrdCxlGrp,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        transact_time: UTCTimestamp
    },

    /// SecurityTypeRequest message. Message code: v
    SecurityTypeRequest {
        security_req_id: FIXString,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        product: Option<Product>,
        security_type: Option<SecurityType>,
        security_sub_type: Option<FIXString>
    },

    /// SecurityTypes message. Message code: w
    SecurityTypes {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_response_type: SecurityResponseType,
        tot_no_security_types: Option<FIXInt>,
        last_fragment: Option<LastFragment>,
        sec_types_grp: Option<SecTypesGrp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// SecurityListRequest message. Message code: x
    SecurityListRequest {
        security_req_id: FIXString,
        security_list_request_type: SecurityListRequestType,
        instrument: Option<Instrument>,
        instrument_extension: Option<InstrumentExtension>,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// SecurityList message. Message code: y
    SecurityList {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_request_result: SecurityRequestResult,
        tot_no_related_sym: Option<FIXInt>,
        last_fragment: Option<LastFragment>,
        sec_list_grp: Option<SecListGrp>
    },

    /// DerivativeSecurityListRequest message. Message code: z
    DerivativeSecurityListRequest {
        security_req_id: FIXString,
        security_list_request_type: SecurityListRequestType,
        underlying_instrument: Option<UnderlyingInstrument>,
        security_sub_type: Option<FIXString>,
        currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// DerivativeSecurityList message. Message code: AA
    DerivativeSecurityList {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_request_result: SecurityRequestResult,
        underlying_instrument: Option<UnderlyingInstrument>,
        tot_no_related_sym: Option<FIXInt>,
        last_fragment: Option<LastFragment>,
        rel_sym_deriv_sec_grp: Option<RelSymDerivSecGrp>
    },

    /// NewOrderMultileg message. Message code: AB
    NewOrderMultileg {
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        trade_origination_date: Option<LocalMktDate>,
        trade_date: Option<LocalMktDate>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_id: Option<FIXString>,
        pre_alloc_mleg_grp: Option<PreAllocMlegGrp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: Option<HandlInst>,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        process_code: Option<ProcessCode>,
        side: Side,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        prev_close_px: Option<Price>,
        leg_ord_grp: LegOrdGrp,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        qty_type: Option<QtyType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        ioiid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<CustOrderCapacity>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        booking_type: Option<BookingType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        peg_instructions: Option<PegInstructions>,
        discretion_instructions: Option<DiscretionInstructions>,
        target_strategy: Option<TargetStrategy>,
        target_strategy_parameters: Option<FIXString>,
        participation_rate: Option<Percentage>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        multi_leg_rpt_type_req: Option<MultiLegRptTypeReq>
    },

    /// MultilegOrderCancelReplace message. Message code: AC
    MultilegOrderCancelReplace {
        order_id: Option<FIXString>,
        orig_cl_ord_id: FIXString,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        parties: Option<Parties>,
        trade_origination_date: Option<LocalMktDate>,
        trade_date: Option<LocalMktDate>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_id: Option<FIXString>,
        pre_alloc_mleg_grp: Option<PreAllocMlegGrp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: Option<HandlInst>,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        process_code: Option<ProcessCode>,
        side: Side,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        prev_close_px: Option<Price>,
        leg_ord_grp: LegOrdGrp,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        qty_type: Option<QtyType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        ioiid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<CustOrderCapacity>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        booking_type: Option<BookingType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        peg_instructions: Option<PegInstructions>,
        discretion_instructions: Option<DiscretionInstructions>,
        target_strategy: Option<TargetStrategy>,
        target_strategy_parameters: Option<FIXString>,
        participation_rate: Option<Percentage>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        multi_leg_rpt_type_req: Option<MultiLegRptTypeReq>
    },

    /// TradeCaptureReportRequest message. Message code: AD
    TradeCaptureReportRequest {
        trade_request_id: FIXString,
        trade_request_type: TradeRequestType,
        subscription_request_type: Option<SubscriptionRequestType>,
        trade_report_id: Option<FIXString>,
        secondary_trade_report_id: Option<FIXString>,
        exec_id: Option<FIXString>,
        exec_type: Option<ExecType>,
        order_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        match_status: Option<MatchStatus>,
        trd_type: Option<TrdType>,
        trd_sub_type: Option<FIXInt>,
        transfer_reason: Option<FIXString>,
        secondary_trd_type: Option<FIXInt>,
        trade_link_id: Option<FIXString>,
        trd_match_id: Option<FIXString>,
        parties: Option<Parties>,
        instrument: Option<Instrument>,
        instrument_extension: Option<InstrumentExtension>,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        trd_cap_dt_grp: Option<TrdCapDtGrp>,
        clearing_business_date: Option<LocalMktDate>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        time_bracket: Option<FIXString>,
        side: Option<Side>,
        multi_leg_reporting_type: Option<MultiLegReportingType>,
        trade_input_source: Option<FIXString>,
        trade_input_device: Option<FIXString>,
        response_transport_type: Option<ResponseTransportType>,
        response_destination: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// TradeCaptureReport message. Message code: AE
    TradeCaptureReport {
        trade_report_id: FIXString,
        trade_report_trans_type: Option<FIXInt>,
        trade_report_type: Option<TradeReportType>,
        trade_request_id: Option<FIXString>,
        trd_type: Option<TrdType>,
        trd_sub_type: Option<FIXInt>,
        secondary_trd_type: Option<FIXInt>,
        transfer_reason: Option<FIXString>,
        exec_type: Option<ExecType>,
        tot_num_trade_reports: Option<FIXInt>,
        last_rpt_requested: Option<FIXBoolean>,
        unsolicited_indicator: Option<UnsolicitedIndicator>,
        subscription_request_type: Option<SubscriptionRequestType>,
        trade_report_ref_id: Option<FIXString>,
        secondary_trade_report_ref_id: Option<FIXString>,
        secondary_trade_report_id: Option<FIXString>,
        trade_link_id: Option<FIXString>,
        trd_match_id: Option<FIXString>,
        exec_id: Option<FIXString>,
        ord_status: Option<OrdStatus>,
        secondary_exec_id: Option<FIXString>,
        exec_restatement_reason: Option<ExecRestatementReason>,
        previously_reported: PreviouslyReported,
        price_type: Option<PriceType>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        order_qty_data: Option<OrderQtyData>,
        qty_type: Option<QtyType>,
        yield_data: Option<YieldData>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        underlying_trading_session_id: Option<FIXString>,
        underlying_trading_session_sub_id: Option<FIXString>,
        last_qty: Qty,
        last_px: Price,
        last_par_px: Option<Price>,
        last_spot_rate: Option<Price>,
        last_forward_points: Option<PriceOffset>,
        last_mkt: Option<MICExchange>,
        trade_date: LocalMktDate,
        clearing_business_date: Option<LocalMktDate>,
        avg_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        avg_px_indicator: Option<AvgPxIndicator>,
        position_amount_data: Option<PositionAmountData>,
        multi_leg_reporting_type: Option<MultiLegReportingType>,
        trade_leg_ref_id: Option<FIXString>,
        trd_instrmt_leg_grp: Option<TrdInstrmtLegGrp>,
        transact_time: UTCTimestamp,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        match_status: Option<MatchStatus>,
        match_type: Option<MatchType>,
        trd_cap_rpt_side_grp: TrdCapRptSideGrp,
        copy_msg_indicator: Option<FIXBoolean>,
        publish_trd_indicator: Option<PublishTrdIndicator>,
        short_sale_reason: Option<ShortSaleReason>
    },

    /// OrderMassStatusRequest message. Message code: AF
    OrderMassStatusRequest {
        mass_status_req_id: FIXString,
        mass_status_req_type: MassStatusReqType,
        parties: Option<Parties>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Option<Instrument>,
        underlying_instrument: Option<UnderlyingInstrument>,
        side: Option<Side>
    },

    /// QuoteRequestReject message. Message code: AG
    QuoteRequestReject {
        quote_req_id: FIXString,
        rfq_req_id: Option<FIXString>,
        quote_request_reject_reason: QuoteRequestRejectReason,
        quot_req_rjct_grp: QuotReqRjctGrp,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// RFQRequest message. Message code: AH
    RFQRequest {
        rfq_req_id: FIXString,
        rfq_req_grp: RFQReqGrp,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// QuoteStatusReport message. Message code: AI
    QuoteStatusReport {
        quote_status_req_id: Option<FIXString>,
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_resp_id: Option<FIXString>,
        quote_type: Option<QuoteType>,
        parties: Option<Parties>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Option<Side>,
        order_qty_data: Option<OrderQtyData>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        settl_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        currency: Option<Currency>,
        stipulations: Option<Stipulations>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        leg_quot_stat_grp: Option<LegQuotStatGrp>,
        quot_qual_grp: Option<QuotQualGrp>,
        expire_time: Option<UTCTimestamp>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        bid_px: Option<Price>,
        offer_px: Option<Price>,
        mkt_bid_px: Option<Price>,
        mkt_offer_px: Option<Price>,
        min_bid_size: Option<Qty>,
        bid_size: Option<Qty>,
        min_offer_size: Option<Qty>,
        offer_size: Option<Qty>,
        valid_until_time: Option<UTCTimestamp>,
        bid_spot_rate: Option<Price>,
        offer_spot_rate: Option<Price>,
        bid_forward_points: Option<PriceOffset>,
        offer_forward_points: Option<PriceOffset>,
        mid_px: Option<Price>,
        bid_yield: Option<Percentage>,
        mid_yield: Option<Percentage>,
        offer_yield: Option<Percentage>,
        transact_time: Option<UTCTimestamp>,
        ord_type: Option<OrdType>,
        bid_forward_points2: Option<PriceOffset>,
        offer_forward_points2: Option<PriceOffset>,
        settl_curr_bid_fx_rate: Option<FIXFloat>,
        settl_curr_offer_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        comm_type: Option<CommType>,
        commission: Option<Amt>,
        cust_order_capacity: Option<CustOrderCapacity>,
        ex_destination: Option<MICExchange>,
        quote_status: Option<QuoteStatus>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// QuoteResponse message. Message code: AJ
    QuoteResponse {
        quote_resp_id: FIXString,
        quote_id: Option<FIXString>,
        quote_resp_type: QuoteRespType,
        cl_ord_id: Option<FIXString>,
        order_capacity: Option<OrderCapacity>,
        ioiid: Option<FIXString>,
        quote_type: Option<QuoteType>,
        quot_qual_grp: Option<QuotQualGrp>,
        parties: Option<Parties>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Instrument,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        side: Option<Side>,
        order_qty_data: Option<OrderQtyData>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        settl_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        currency: Option<Currency>,
        stipulations: Option<Stipulations>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        leg_quot_grp: Option<LegQuotGrp>,
        bid_px: Option<Price>,
        offer_px: Option<Price>,
        mkt_bid_px: Option<Price>,
        mkt_offer_px: Option<Price>,
        min_bid_size: Option<Qty>,
        bid_size: Option<Qty>,
        min_offer_size: Option<Qty>,
        offer_size: Option<Qty>,
        valid_until_time: Option<UTCTimestamp>,
        bid_spot_rate: Option<Price>,
        offer_spot_rate: Option<Price>,
        bid_forward_points: Option<PriceOffset>,
        offer_forward_points: Option<PriceOffset>,
        mid_px: Option<Price>,
        bid_yield: Option<Percentage>,
        mid_yield: Option<Percentage>,
        offer_yield: Option<Percentage>,
        transact_time: Option<UTCTimestamp>,
        ord_type: Option<OrdType>,
        bid_forward_points2: Option<PriceOffset>,
        offer_forward_points2: Option<PriceOffset>,
        settl_curr_bid_fx_rate: Option<FIXFloat>,
        settl_curr_offer_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        commission: Option<Amt>,
        comm_type: Option<CommType>,
        cust_order_capacity: Option<CustOrderCapacity>,
        ex_destination: Option<MICExchange>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>
    },

    /// Confirmation message. Message code: AK
    Confirmation {
        confirm_id: FIXString,
        confirm_ref_id: Option<FIXString>,
        confirm_req_id: Option<FIXString>,
        confirm_trans_type: ConfirmTransType,
        confirm_type: ConfirmType,
        copy_msg_indicator: Option<FIXBoolean>,
        legal_confirm: Option<LegalConfirm>,
        confirm_status: ConfirmStatus,
        parties: Option<Parties>,
        ord_alloc_grp: Option<OrdAllocGrp>,
        alloc_id: Option<FIXString>,
        secondary_alloc_id: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        transact_time: UTCTimestamp,
        trade_date: LocalMktDate,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        instrument: Instrument,
        instrument_extension: Option<InstrumentExtension>,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: UndInstrmtGrp,
        instrmt_leg_grp: InstrmtLegGrp,
        yield_data: Option<YieldData>,
        alloc_qty: Qty,
        qty_type: Option<QtyType>,
        side: Side,
        currency: Option<Currency>,
        last_mkt: Option<MICExchange>,
        cpcty_conf_grp: CpctyConfGrp,
        alloc_account: FIXString,
        alloc_acct_id_source: Option<FIXInt>,
        alloc_account_type: Option<AllocAccountType>,
        avg_px: Price,
        avg_px_precision: Option<FIXInt>,
        price_type: Option<PriceType>,
        avg_par_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        reported_px: Option<Price>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        process_code: Option<ProcessCode>,
        gross_trade_amt: Amt,
        num_days_interest: Option<FIXInt>,
        ex_date: Option<LocalMktDate>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        interest_at_maturity: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        concession: Option<Amt>,
        total_takedown: Option<Amt>,
        net_money: Amt,
        maturity_net_money: Option<Amt>,
        settl_curr_amt: Option<Amt>,
        settl_currency: Option<Currency>,
        settl_curr_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        settl_instructions_data: Option<SettlInstructionsData>,
        commission_data: Option<CommissionData>,
        shared_commission: Option<Amt>,
        stipulations: Option<Stipulations>,
        misc_fees_grp: Option<MiscFeesGrp>
    },

    /// PositionMaintenanceRequest message. Message code: AL
    PositionMaintenanceRequest {
        pos_req_id: FIXString,
        pos_trans_type: PosTransType,
        pos_maint_action: PosMaintAction,
        orig_pos_req_ref_id: Option<FIXString>,
        pos_maint_rpt_ref_id: Option<FIXString>,
        clearing_business_date: LocalMktDate,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        parties: Parties,
        account: FIXString,
        acct_id_source: Option<AcctIDSource>,
        account_type: AccountType,
        instrument: Instrument,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        transact_time: UTCTimestamp,
        position_qty: PositionQty,
        adjustment_type: Option<AdjustmentType>,
        contrary_instruction_indicator: Option<FIXBoolean>,
        prior_spread_indicator: Option<FIXBoolean>,
        threshold_amount: Option<PriceOffset>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// PositionMaintenanceReport message. Message code: AM
    PositionMaintenanceReport {
        pos_maint_rpt_id: FIXString,
        pos_trans_type: PosTransType,
        pos_req_id: Option<FIXString>,
        pos_maint_action: PosMaintAction,
        orig_pos_req_ref_id: FIXString,
        pos_maint_status: PosMaintStatus,
        pos_maint_result: Option<PosMaintResult>,
        clearing_business_date: LocalMktDate,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        parties: Option<Parties>,
        account: FIXString,
        acct_id_source: Option<AcctIDSource>,
        account_type: AccountType,
        instrument: Instrument,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        transact_time: UTCTimestamp,
        position_qty: PositionQty,
        position_amount_data: PositionAmountData,
        adjustment_type: Option<AdjustmentType>,
        threshold_amount: Option<PriceOffset>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// RequestForPositions message. Message code: AN
    RequestForPositions {
        pos_req_id: FIXString,
        pos_req_type: PosReqType,
        match_status: Option<MatchStatus>,
        subscription_request_type: Option<SubscriptionRequestType>,
        parties: Parties,
        account: FIXString,
        acct_id_source: Option<AcctIDSource>,
        account_type: AccountType,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        clearing_business_date: LocalMktDate,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        trdg_ses_grp: Option<TrdgSesGrp>,
        transact_time: UTCTimestamp,
        response_transport_type: Option<ResponseTransportType>,
        response_destination: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// RequestForPositionsAck message. Message code: AO
    RequestForPositionsAck {
        pos_maint_rpt_id: FIXString,
        pos_req_id: Option<FIXString>,
        total_num_pos_reports: Option<FIXInt>,
        unsolicited_indicator: Option<UnsolicitedIndicator>,
        pos_req_result: PosReqResult,
        pos_req_status: PosReqStatus,
        parties: Parties,
        account: FIXString,
        acct_id_source: Option<AcctIDSource>,
        account_type: AccountType,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        response_transport_type: Option<ResponseTransportType>,
        response_destination: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// PositionReport message. Message code: AP
    PositionReport {
        pos_maint_rpt_id: FIXString,
        pos_req_id: Option<FIXString>,
        pos_req_type: Option<PosReqType>,
        subscription_request_type: Option<SubscriptionRequestType>,
        total_num_pos_reports: Option<FIXInt>,
        unsolicited_indicator: Option<UnsolicitedIndicator>,
        pos_req_result: PosReqResult,
        clearing_business_date: LocalMktDate,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        parties: Parties,
        account: FIXString,
        acct_id_source: Option<AcctIDSource>,
        account_type: AccountType,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        settl_price: Price,
        settl_price_type: SettlPriceType,
        prior_settl_price: Price,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        pos_und_instrmt_grp: Option<PosUndInstrmtGrp>,
        position_qty: PositionQty,
        position_amount_data: PositionAmountData,
        regist_status: Option<RegistStatus>,
        delivery_date: Option<LocalMktDate>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// TradeCaptureReportRequestAck message. Message code: AQ
    TradeCaptureReportRequestAck {
        trade_request_id: FIXString,
        trade_request_type: TradeRequestType,
        subscription_request_type: Option<SubscriptionRequestType>,
        tot_num_trade_reports: Option<FIXInt>,
        trade_request_result: TradeRequestResult,
        trade_request_status: TradeRequestStatus,
        instrument: Instrument,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        multi_leg_reporting_type: Option<MultiLegReportingType>,
        response_transport_type: Option<ResponseTransportType>,
        response_destination: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// TradeCaptureReportAck message. Message code: AR
    TradeCaptureReportAck {
        trade_report_id: FIXString,
        trade_report_trans_type: Option<FIXInt>,
        trade_report_type: Option<TradeReportType>,
        trd_type: Option<TrdType>,
        trd_sub_type: Option<FIXInt>,
        secondary_trd_type: Option<FIXInt>,
        transfer_reason: Option<FIXString>,
        exec_type: ExecType,
        trade_report_ref_id: Option<FIXString>,
        secondary_trade_report_ref_id: Option<FIXString>,
        trd_rpt_status: Option<TrdRptStatus>,
        trade_report_reject_reason: Option<TradeReportRejectReason>,
        secondary_trade_report_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>,
        trade_link_id: Option<FIXString>,
        trd_match_id: Option<FIXString>,
        exec_id: Option<FIXString>,
        secondary_exec_id: Option<FIXString>,
        instrument: Instrument,
        transact_time: Option<UTCTimestamp>,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        response_transport_type: Option<ResponseTransportType>,
        response_destination: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trd_instrmt_leg_grp: Option<TrdInstrmtLegGrp>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<CustOrderCapacity>,
        account: Option<FIXString>,
        acct_id_source: Option<AcctIDSource>,
        account_type: Option<AccountType>,
        position_effect: Option<PositionEffect>,
        prealloc_method: Option<PreallocMethod>,
        trd_alloc_grp: Option<TrdAllocGrp>
    },

    /// AllocationReport message. Message code: AS
    AllocationReport {
        alloc_report_id: FIXString,
        alloc_id: Option<FIXString>,
        alloc_trans_type: AllocTransType,
        alloc_report_ref_id: Option<FIXString>,
        alloc_canc_replace_reason: Option<AllocCancReplaceReason>,
        secondary_alloc_id: Option<FIXString>,
        alloc_report_type: AllocReportType,
        alloc_status: AllocStatus,
        alloc_rej_code: Option<AllocRejCode>,
        ref_alloc_id: Option<FIXString>,
        alloc_intermed_req_type: Option<AllocIntermedReqType>,
        alloc_link_id: Option<FIXString>,
        alloc_link_type: Option<AllocLinkType>,
        booking_ref_id: Option<FIXString>,
        alloc_no_orders_type: AllocNoOrdersType,
        ord_alloc_grp: Option<OrdAllocGrp>,
        exec_alloc_grp: Option<ExecAllocGrp>,
        previously_reported: Option<PreviouslyReported>,
        reversal_indicator: Option<FIXBoolean>,
        match_type: Option<MatchType>,
        side: Side,
        instrument: Instrument,
        instrument_extension: Option<InstrumentExtension>,
        financing_details: Option<FinancingDetails>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        quantity: Qty,
        qty_type: Option<QtyType>,
        last_mkt: Option<MICExchange>,
        trade_origination_date: Option<LocalMktDate>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        price_type: Option<PriceType>,
        avg_px: Price,
        avg_par_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        currency: Option<Currency>,
        avg_px_precision: Option<FIXInt>,
        parties: Option<Parties>,
        trade_date: LocalMktDate,
        transact_time: Option<UTCTimestamp>,
        settl_type: Option<SettlType>,
        settl_date: Option<LocalMktDate>,
        booking_type: Option<BookingType>,
        gross_trade_amt: Option<Amt>,
        concession: Option<Amt>,
        total_takedown: Option<Amt>,
        net_money: Option<Amt>,
        position_effect: Option<PositionEffect>,
        auto_accept_indicator: Option<FIXBoolean>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        num_days_interest: Option<FIXInt>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        total_accrued_interest_amt: Option<Amt>,
        interest_at_maturity: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        legal_confirm: Option<LegalConfirm>,
        stipulations: Option<Stipulations>,
        yield_data: Option<YieldData>,
        tot_no_allocs: Option<FIXInt>,
        last_fragment: Option<LastFragment>,
        alloc_grp: Option<AllocGrp>
    },

    /// AllocationReportAck message. Message code: AT
    AllocationReportAck {
        alloc_report_id: FIXString,
        alloc_id: FIXString,
        parties: Option<Parties>,
        secondary_alloc_id: Option<FIXString>,
        trade_date: Option<LocalMktDate>,
        transact_time: UTCTimestamp,
        alloc_status: AllocStatus,
        alloc_rej_code: Option<AllocRejCode>,
        alloc_report_type: Option<AllocReportType>,
        alloc_intermed_req_type: Option<AllocIntermedReqType>,
        match_status: Option<MatchStatus>,
        product: Option<Product>,
        security_type: Option<SecurityType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        alloc_ack_grp: Option<AllocAckGrp>
    },

    /// ConfirmationAck message. Message code: AU
    ConfirmationAck {
        confirm_id: FIXString,
        trade_date: LocalMktDate,
        transact_time: UTCTimestamp,
        affirm_status: AffirmStatus,
        confirm_rej_reason: Option<ConfirmRejReason>,
        match_status: Option<MatchStatus>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// SettlementInstructionRequest message. Message code: AV
    SettlementInstructionRequest {
        settl_inst_req_id: FIXString,
        transact_time: UTCTimestamp,
        parties: Option<Parties>,
        alloc_account: Option<FIXString>,
        alloc_acct_id_source: Option<FIXInt>,
        side: Option<Side>,
        product: Option<Product>,
        security_type: Option<SecurityType>,
        cfi_code: Option<FIXString>,
        effective_time: Option<UTCTimestamp>,
        expire_time: Option<UTCTimestamp>,
        last_update_time: Option<UTCTimestamp>,
        stand_inst_db_type: Option<StandInstDbType>,
        stand_inst_db_name: Option<FIXString>,
        stand_inst_db_id: Option<FIXString>
    },

    /// AssignmentReport message. Message code: AW
    AssignmentReport {
        asgn_rpt_id: FIXString,
        tot_num_assignment_reports: Option<FIXInt>,
        last_rpt_requested: Option<FIXBoolean>,
        parties: Parties,
        account: Option<FIXString>,
        account_type: AccountType,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        position_qty: PositionQty,
        position_amount_data: PositionAmountData,
        threshold_amount: Option<PriceOffset>,
        settl_price: Price,
        settl_price_type: SettlPriceType,
        underlying_settl_price: Price,
        expire_date: Option<LocalMktDate>,
        assignment_method: AssignmentMethod,
        assignment_unit: Option<Qty>,
        open_interest: Amt,
        exercise_method: ExerciseMethod,
        settl_sess_id: SettlSessID,
        settl_sess_sub_id: FIXString,
        clearing_business_date: LocalMktDate,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// CollateralRequest message. Message code: AX
    CollateralRequest {
        coll_req_id: FIXString,
        coll_asgn_reason: CollAsgnReason,
        transact_time: UTCTimestamp,
        expire_time: Option<UTCTimestamp>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        cl_ord_id: Option<FIXString>,
        order_id: Option<FIXString>,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        exec_coll_grp: Option<ExecCollGrp>,
        trd_coll_grp: Option<TrdCollGrp>,
        instrument: Option<Instrument>,
        financing_details: Option<FinancingDetails>,
        settl_date: Option<LocalMktDate>,
        quantity: Option<Qty>,
        qty_type: Option<QtyType>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_coll_grp: Option<UndInstrmtCollGrp>,
        margin_excess: Option<Amt>,
        total_net_value: Option<Amt>,
        cash_outstanding: Option<Amt>,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        side: Option<Side>,
        misc_fees_grp: Option<MiscFeesGrp>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        accrued_interest_amt: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        stipulations: Option<Stipulations>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        clearing_business_date: Option<LocalMktDate>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// CollateralAssignment message. Message code: AY
    CollateralAssignment {
        coll_asgn_id: FIXString,
        coll_req_id: Option<FIXString>,
        coll_asgn_reason: CollAsgnReason,
        coll_asgn_trans_type: CollAsgnTransType,
        coll_asgn_ref_id: Option<FIXString>,
        transact_time: UTCTimestamp,
        expire_time: Option<UTCTimestamp>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        cl_ord_id: Option<FIXString>,
        order_id: Option<FIXString>,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        exec_coll_grp: Option<ExecCollGrp>,
        trd_coll_grp: Option<TrdCollGrp>,
        instrument: Option<Instrument>,
        financing_details: Option<FinancingDetails>,
        settl_date: Option<LocalMktDate>,
        quantity: Option<Qty>,
        qty_type: Option<QtyType>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_coll_grp: Option<UndInstrmtCollGrp>,
        margin_excess: Option<Amt>,
        total_net_value: Option<Amt>,
        cash_outstanding: Option<Amt>,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        side: Option<Side>,
        misc_fees_grp: Option<MiscFeesGrp>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        accrued_interest_amt: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        stipulations: Option<Stipulations>,
        settl_instructions_data: Option<SettlInstructionsData>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        clearing_business_date: Option<LocalMktDate>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// CollateralResponse message. Message code: AZ
    CollateralResponse {
        coll_resp_id: FIXString,
        coll_asgn_id: FIXString,
        coll_req_id: Option<FIXString>,
        coll_asgn_reason: CollAsgnReason,
        coll_asgn_trans_type: Option<CollAsgnTransType>,
        coll_asgn_resp_type: CollAsgnRespType,
        coll_asgn_reject_reason: Option<CollAsgnRejectReason>,
        transact_time: UTCTimestamp,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        cl_ord_id: Option<FIXString>,
        order_id: Option<FIXString>,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        exec_coll_grp: Option<ExecCollGrp>,
        trd_coll_grp: Option<TrdCollGrp>,
        instrument: Option<Instrument>,
        financing_details: Option<FinancingDetails>,
        settl_date: Option<LocalMktDate>,
        quantity: Option<Qty>,
        qty_type: Option<QtyType>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_coll_grp: Option<UndInstrmtCollGrp>,
        margin_excess: Option<Amt>,
        total_net_value: Option<Amt>,
        cash_outstanding: Option<Amt>,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        side: Option<Side>,
        misc_fees_grp: Option<MiscFeesGrp>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        accrued_interest_amt: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        stipulations: Option<Stipulations>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// CollateralReport message. Message code: BA
    CollateralReport {
        coll_rpt_id: FIXString,
        coll_inquiry_id: Option<FIXString>,
        coll_status: CollStatus,
        tot_num_reports: Option<FIXInt>,
        last_rpt_requested: Option<FIXBoolean>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        cl_ord_id: Option<FIXString>,
        order_id: Option<FIXString>,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        exec_coll_grp: Option<ExecCollGrp>,
        trd_coll_grp: Option<TrdCollGrp>,
        instrument: Option<Instrument>,
        financing_details: Option<FinancingDetails>,
        settl_date: Option<LocalMktDate>,
        quantity: Option<Qty>,
        qty_type: Option<QtyType>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        margin_excess: Option<Amt>,
        total_net_value: Option<Amt>,
        cash_outstanding: Option<Amt>,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        side: Option<Side>,
        misc_fees_grp: Option<MiscFeesGrp>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        accrued_interest_amt: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        stipulations: Option<Stipulations>,
        settl_instructions_data: Option<SettlInstructionsData>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        clearing_business_date: Option<LocalMktDate>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// CollateralInquiry message. Message code: BB
    CollateralInquiry {
        coll_inquiry_id: Option<FIXString>,
        coll_inq_qual_grp: Option<CollInqQualGrp>,
        subscription_request_type: Option<SubscriptionRequestType>,
        response_transport_type: Option<ResponseTransportType>,
        response_destination: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        cl_ord_id: Option<FIXString>,
        order_id: Option<FIXString>,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        exec_coll_grp: Option<ExecCollGrp>,
        trd_coll_grp: Option<TrdCollGrp>,
        instrument: Option<Instrument>,
        financing_details: Option<FinancingDetails>,
        settl_date: Option<LocalMktDate>,
        quantity: Option<Qty>,
        qty_type: Option<QtyType>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        margin_excess: Option<Amt>,
        total_net_value: Option<Amt>,
        cash_outstanding: Option<Amt>,
        trd_reg_timestamps: Option<TrdRegTimestamps>,
        side: Option<Side>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        accrued_interest_amt: Option<Amt>,
        end_accrued_interest_amt: Option<Amt>,
        start_cash: Option<Amt>,
        end_cash: Option<Amt>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        stipulations: Option<Stipulations>,
        settl_instructions_data: Option<SettlInstructionsData>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        clearing_business_date: Option<LocalMktDate>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// NetworkCounterpartySystemStatusRequest message. Message code: BC
    NetworkCounterpartySystemStatusRequest {
        network_request_type: NetworkRequestType,
        network_request_id: FIXString,
        comp_id_req_grp: Option<CompIDReqGrp>
    },

    /// NetworkCounterpartySystemStatusResponse message. Message code: BD
    NetworkCounterpartySystemStatusResponse {
        network_status_response_type: NetworkStatusResponseType,
        network_request_id: Option<FIXString>,
        network_response_id: FIXString,
        last_network_response_id: Option<FIXString>,
        comp_id_stat_grp: CompIDStatGrp
    },

    /// UserRequest message. Message code: BE
    UserRequest {
        user_request_id: FIXString,
        user_request_type: UserRequestType,
        username: FIXString,
        password: Option<FIXString>,
        new_password: Option<FIXString>,
        raw_data_length: Option<Length>,
        raw_data: Option<Data>
    },

    /// UserResponse message. Message code: BF
    UserResponse {
        user_request_id: FIXString,
        username: FIXString,
        user_status: Option<UserStatus>,
        user_status_text: Option<FIXString>
    },

    /// CollateralInquiryAck message. Message code: BG
    CollateralInquiryAck {
        coll_inquiry_id: FIXString,
        coll_inquiry_status: CollInquiryStatus,
        coll_inquiry_result: Option<CollInquiryResult>,
        coll_inq_qual_grp: Option<CollInqQualGrp>,
        tot_num_reports: Option<FIXInt>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        cl_ord_id: Option<FIXString>,
        order_id: Option<FIXString>,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        exec_coll_grp: Option<ExecCollGrp>,
        trd_coll_grp: Option<TrdCollGrp>,
        instrument: Option<Instrument>,
        financing_details: Option<FinancingDetails>,
        settl_date: Option<LocalMktDate>,
        quantity: Option<Qty>,
        qty_type: Option<QtyType>,
        currency: Option<Currency>,
        instrmt_leg_grp: Option<InstrmtLegGrp>,
        und_instrmt_grp: Option<UndInstrmtGrp>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        settl_sess_id: Option<SettlSessID>,
        settl_sess_sub_id: Option<FIXString>,
        clearing_business_date: Option<LocalMktDate>,
        response_transport_type: Option<ResponseTransportType>,
        response_destination: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ConfirmationRequest message. Message code: BH
    ConfirmationRequest {
        confirm_req_id: FIXString,
        confirm_type: ConfirmType,
        ord_alloc_grp: Option<OrdAllocGrp>,
        alloc_id: Option<FIXString>,
        secondary_alloc_id: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        transact_time: UTCTimestamp,
        alloc_account: Option<FIXString>,
        alloc_acct_id_source: Option<FIXInt>,
        alloc_account_type: Option<AllocAccountType>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    }
}