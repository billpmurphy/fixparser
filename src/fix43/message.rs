use types::*;
use fix43::fields::*;

pub struct Header {
    pub begin_string: FIXString,
    pub body_length: Length,
    pub msg_type: MsgType,
    pub sender_comp_id: FIXString,
    pub target_comp_id: FIXString,
    pub on_behalf_of_comp_id: Option<FIXString>,
    pub deliver_to_comp_id: Option<FIXString>,
    pub secure_data_len: Option<Length>,
    pub secure_data: Option<Data>,
    pub msg_seq_num: SeqNum,
    pub sender_sub_id: Option<FIXString>,
    pub sender_location_id: Option<FIXString>,
    pub target_sub_id: Option<FIXString>,
    pub target_location_id: Option<FIXString>,
    pub on_behalf_of_sub_id: Option<FIXString>,
    pub on_behalf_of_location_id: Option<FIXString>,
    pub deliver_to_sub_id: Option<FIXString>,
    pub deliver_to_location_id: Option<FIXString>,
    pub poss_dup_flag: Option<PossDupFlag>,
    pub poss_resend: Option<PossResend>,
    pub sending_time: UTCTimestamp,
    pub orig_sending_time: Option<UTCTimestamp>,
    pub xml_data: Option<Data>,
    pub message_encoding: Option<MessageEncoding>,
    pub last_msg_seq_num_processed: Option<SeqNum>,
    pub on_behalf_of_sending_time: Option<UTCTimestamp>,
    pub hop_comp_id: Option<FIXString>,
    pub hop_sending_time: Option<UTCTimestamp>,
    pub hop_ref_id: Option<SeqNum>
}

pub struct Message {
    /// Standard message header.
    pub header: Header,
    /// Message body
    pub body: MessageBody,
}

pub enum MessageBody {
    /// Heartbeat message. Message code: 0
    Heartbeat {
        test_req_id: Option<FIXString>
    },

    /// TestRequest message. Message code: 1
    TestRequest {
        test_req_id: FIXString
    },

    /// ResendRequest message. Message code: 2
    ResendRequest {
        begin_seq_no: SeqNum,
        end_seq_no: SeqNum
    },

    /// Reject message. Message code: 3
    Reject {
        ref_seq_num: SeqNum,
        ref_tag_id: Option<FIXInt>,
        ref_msg_type: Option<FIXString>,
        session_reject_reason: Option<SessionRejectReason>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// SequenceReset message. Message code: 4
    SequenceReset {
        gap_fill_flag: Option<GapFillFlag>,
        new_seq_no: SeqNum
    },

    /// Logout message. Message code: 5
    Logout {
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// IOI message. Message code: 6
    IOI {
        io_iid: FIXString,
        ioi_trans_type: IOITransType,
        ioi_ref_id: Option<FIXString>,
        instrument: Instrument,
        side: Side,
        quantity_type: Option<QuantityType>,
        ioi_qty: IOIQty,
        price_type: Option<PriceType>,
        price: Option<Price>,
        currency: Option<Currency>,
        valid_until_time: Option<UTCTimestamp>,
        ioi_qlty_ind: Option<IOIQltyInd>,
        ioi_natural_flag: Option<IOINaturalFlag>,
        ioi_qualifier: Option<IOIQualifier>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        transact_time: Option<UTCTimestamp>,
        url_link: Option<FIXString>,
        routing_type: Option<RoutingType>,
        routing_id: Option<FIXString>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        benchmark: Option<Benchmark>
    },

    /// Advertisement message. Message code: 7
    Advertisement {
        adv_id: FIXString,
        adv_trans_type: AdvTransType,
        adv_ref_id: Option<FIXString>,
        instrument: Instrument,
        adv_side: AdvSide,
        quantity: Qty,
        price: Option<Price>,
        currency: Option<Currency>,
        trade_date: Option<LocalMktDate>,
        transact_time: Option<UTCTimestamp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        url_link: Option<FIXString>,
        last_mkt: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>
    },

    /// ExecutionReport message. Message code: 8
    ExecutionReport {
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        secondary_exec_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        orig_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        trade_origination_date: Option<UTCDateOnly>,
        contra_broker: Option<FIXString>,
        contra_trader: Option<FIXString>,
        contra_trade_qty: Option<Qty>,
        contra_trade_time: Option<UTCTimestamp>,
        contra_leg_ref_id: Option<FIXString>,
        list_id: Option<FIXString>,
        cross_id: Option<FIXString>,
        orig_cross_id: Option<FIXString>,
        cross_type: Option<CrossType>,
        exec_id: FIXString,
        exec_ref_id: Option<FIXString>,
        exec_type: ExecType,
        ord_status: OrdStatus,
        working_indicator: Option<WorkingIndicator>,
        ord_rej_reason: Option<OrdRejReason>,
        exec_restatement_reason: Option<ExecRestatementReason>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        instrument: Instrument,
        side: Side,
        stipulations: Option<Stipulations>,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        ord_type: Option<OrdType>,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        exec_inst: Option<ExecInst>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        rule80_a: Option<Rule80A>,
        last_qty: Option<Qty>,
        underlying_last_qty: Option<Qty>,
        last_px: Option<Price>,
        underlying_last_px: Option<Price>,
        last_spot_rate: Option<Price>,
        last_forward_points: Option<PriceOffset>,
        last_mkt: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        last_capacity: Option<LastCapacity>,
        leaves_qty: Qty,
        cum_qty: Qty,
        avg_px: Price,
        day_order_qty: Option<Qty>,
        day_cum_qty: Option<Qty>,
        day_avg_px: Option<Price>,
        gt_booking_inst: Option<GTBookingInst>,
        trade_date: Option<LocalMktDate>,
        transact_time: Option<UTCTimestamp>,
        report_to_exch: Option<ReportToExch>,
        commission_data: Option<CommissionData>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        gross_trade_amt: Option<Amt>,
        num_days_interest: Option<FIXInt>,
        ex_date: Option<UTCDateOnly>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        traded_flat_switch: Option<TradedFlatSwitch>,
        basis_feature_date: Option<UTCDateOnly>,
        basis_feature_price: Option<Price>,
        concession: Option<Amt>,
        total_takedown: Option<Amt>,
        net_money: Option<Amt>,
        settl_curr_amt: Option<Amt>,
        settl_currency: Option<Currency>,
        settl_curr_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        handl_inst: Option<HandlInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        position_effect: Option<PositionEffect>,
        max_show: Option<Qty>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        last_forward_points2: Option<PriceOffset>,
        multi_leg_reporting_type: Option<MultiLegReportingType>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        trans_bkd_time: Option<UTCTimestamp>,
        exec_valuation_point: Option<UTCTimestamp>,
        exec_price_type: Option<ExecPriceType>,
        exec_price_adjustment: Option<FIXFloat>,
        priority_indicator: Option<PriorityIndicator>,
        price_improvement: Option<PriceOffset>,
        cont_amt_type: Option<ContAmtType>,
        cont_amt_value: Option<FIXFloat>,
        cont_amt_curr: Option<Currency>,
        instrument_leg: Option<InstrumentLeg>,
        leg_position_effect: Option<FIXChar>,
        leg_covered_or_uncovered: Option<FIXInt>,
        nested_parties: Option<NestedParties>,
        leg_ref_id: Option<FIXString>,
        leg_price: Option<Price>,
        leg_settlmnt_typ: Option<FIXChar>,
        leg_fut_sett_date: Option<LocalMktDate>,
        leg_last_px: Option<Price>
    },

    /// OrderCancelReject message. Message code: 9
    OrderCancelReject {
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_id: FIXString,
        cl_ord_link_id: Option<FIXString>,
        orig_cl_ord_id: FIXString,
        ord_status: OrdStatus,
        working_indicator: Option<WorkingIndicator>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        list_id: Option<FIXString>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        trade_origination_date: Option<UTCDateOnly>,
        transact_time: Option<UTCTimestamp>,
        cxl_rej_response_to: CxlRejResponseTo,
        cxl_rej_reason: Option<CxlRejReason>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// Logon message. Message code: A
    Logon {
        encrypt_method: EncryptMethod,
        heart_bt_int: FIXInt,
        raw_data_length: Option<Length>,
        raw_data: Option<Data>,
        reset_seq_num_flag: Option<ResetSeqNumFlag>,
        max_message_size: Option<Length>,
        ref_msg_type: Option<FIXString>,
        msg_direction: Option<MsgDirection>,
        test_message_indicator: Option<TestMessageIndicator>,
        username: Option<FIXString>,
        password: Option<FIXString>
    },

    /// News message. Message code: B
    News {
        orig_time: Option<UTCTimestamp>,
        urgency: Option<Urgency>,
        headline: FIXString,
        encoded_headline: Option<Data>,
        routing_type: Option<RoutingType>,
        routing_id: Option<FIXString>,
        instrument: Option<Instrument>,
        text: FIXString,
        encoded_text: Option<Data>,
        url_link: Option<FIXString>,
        raw_data_length: Option<Length>,
        raw_data: Option<Data>
    },

    /// Email message. Message code: C
    Email {
        email_thread_id: FIXString,
        email_type: EmailType,
        orig_time: Option<UTCTimestamp>,
        subject: FIXString,
        encoded_subject_len: Option<Length>,
        encoded_subject: Option<Data>,
        routing_type: Option<RoutingType>,
        routing_id: Option<FIXString>,
        instrument: Option<Instrument>,
        order_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        text: FIXString,
        encoded_text: Option<Data>,
        raw_data_length: Option<Length>,
        raw_data: Option<Data>
    },

    /// NewOrderSingle message. Message code: D
    NewOrderSingle {
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        trade_origination_date: Option<UTCDateOnly>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_account: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        nested_parties: Option<NestedParties>,
        alloc_qty: Option<Qty>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: HandlInst,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        process_code: Option<ProcessCode>,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        side: Side,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        stipulations: Option<Stipulations>,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        io_iid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        rule80_a: Option<Rule80A>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        price2: Option<Price>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        net_money: Option<Amt>
    },

    /// NewOrderList message. Message code: E
    NewOrderList {
        list_id: FIXString,
        bid_id: Option<FIXString>,
        client_bid_id: Option<FIXString>,
        prog_rpt_reqs: Option<ProgRptReqs>,
        bid_type: BidType,
        prog_period_interval: Option<FIXInt>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        list_exec_inst_type: Option<ListExecInstType>,
        list_exec_inst: Option<FIXString>,
        encoded_list_exec_inst: Option<Data>,
        tot_no_orders: FIXInt,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        list_seq_no: FIXInt,
        cl_ord_link_id: Option<FIXString>,
        settl_inst_mode: Option<SettlInstMode>,
        parties: Option<Parties>,
        trade_origination_date: Option<UTCDateOnly>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_account: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        nested_parties: Option<NestedParties>,
        alloc_qty: Option<Qty>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: Option<HandlInst>,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        process_code: Option<ProcessCode>,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        side: Side,
        side_value_ind: Option<SideValueInd>,
        locate_reqd: Option<LocateReqd>,
        transact_time: Option<UTCTimestamp>,
        stipulations: Option<Stipulations>,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        ord_type: Option<OrdType>,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        io_iid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        rule80_a: Option<Rule80A>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        price2: Option<Price>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        designation: Option<FIXString>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        net_money: Option<Amt>
    },

    /// OrderCancelRequest message. Message code: F
    OrderCancelRequest {
        orig_cl_ord_id: FIXString,
        order_id: Option<FIXString>,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        list_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        parties: Option<Parties>,
        instrument: Instrument,
        side: Side,
        transact_time: UTCTimestamp,
        order_qty_data: OrderQtyData,
        compliance_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// OrderCancelReplaceRequest message. Message code: G
    OrderCancelReplaceRequest {
        order_id: Option<FIXString>,
        parties: Option<Parties>,
        trade_origination_date: Option<UTCDateOnly>,
        orig_cl_ord_id: FIXString,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        list_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_account: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        nested_parties: Option<NestedParties>,
        alloc_qty: Option<Qty>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: HandlInst,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Instrument,
        side: Side,
        transact_time: UTCTimestamp,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        currency: Option<Currency>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        rule80_a: Option<Rule80A>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        price2: Option<Price>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        locate_reqd: Option<LocateReqd>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        net_money: Option<Amt>
    },

    /// OrderStatusRequest message. Message code: H
    OrderStatusRequest {
        order_id: Option<FIXString>,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        instrument: Instrument,
        side: Side
    },

    /// Allocation message. Message code: J
    Allocation {
        alloc_id: FIXString,
        alloc_trans_type: AllocTransType,
        alloc_type: AllocType,
        ref_alloc_id: Option<FIXString>,
        alloc_link_id: Option<FIXString>,
        alloc_link_type: Option<AllocLinkType>,
        booking_ref_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        order_id: Option<FIXString>,
        secondary_order_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        list_id: Option<FIXString>,
        last_qty: Option<Qty>,
        exec_id: Option<FIXString>,
        secondary_exec_id: Option<FIXString>,
        last_px: Option<Price>,
        last_capacity: Option<LastCapacity>,
        side: Side,
        instrument: Instrument,
        quantity: Qty,
        last_mkt: Option<MICExchange>,
        trade_origination_date: Option<UTCDateOnly>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        price_type: Option<PriceType>,
        avg_px: Price,
        currency: Option<Currency>,
        avg_prx_precision: Option<FIXInt>,
        parties: Option<Parties>,
        trade_date: LocalMktDate,
        transact_time: Option<UTCTimestamp>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        gross_trade_amt: Option<Amt>,
        concession: Option<Amt>,
        total_takedown: Option<Amt>,
        net_money: Option<Amt>,
        position_effect: Option<PositionEffect>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        num_days_interest: Option<FIXInt>,
        accrued_interest_rate: Option<Percentage>,
        total_accrued_interest_amt: Option<Amt>,
        legal_confirm: Option<LegalConfirm>,
        alloc_account: Option<FIXString>,
        alloc_price: Option<Price>,
        alloc_qty: Option<Qty>,
        individual_alloc_id: Option<FIXString>,
        process_code: Option<ProcessCode>,
        nested_parties: Option<NestedParties>,
        notify_broker_of_credit: Option<NotifyBrokerOfCredit>,
        alloc_handl_inst: Option<AllocHandlInst>,
        alloc_text: Option<FIXString>,
        encoded_alloc_text: Option<Data>,
        commission_data: Option<CommissionData>,
        alloc_avg_px: Option<Price>,
        alloc_net_money: Option<Amt>,
        settl_curr_amt: Option<Amt>,
        settl_currency: Option<Currency>,
        settl_curr_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        accrued_interest_amt: Option<Amt>,
        settl_inst_mode: Option<SettlInstMode>,
        misc_fee_amt: Option<Amt>,
        misc_fee_curr: Option<Currency>,
        misc_fee_type: Option<MiscFeeType>
    },

    /// ListCancelRequest message. Message code: K
    ListCancelRequest {
        list_id: FIXString,
        transact_time: UTCTimestamp,
        trade_origination_date: Option<UTCDateOnly>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ListExecute message. Message code: L
    ListExecute {
        list_id: FIXString,
        client_bid_id: Option<FIXString>,
        bid_id: Option<FIXString>,
        transact_time: UTCTimestamp,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ListStatusRequest message. Message code: M
    ListStatusRequest {
        list_id: FIXString,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ListStatus message. Message code: N
    ListStatus {
        list_id: FIXString,
        list_status_type: ListStatusType,
        no_rpts: NumInGroup,
        list_order_status: ListOrderStatus,
        rpt_seq: FIXInt,
        list_status_text: Option<FIXString>,
        encoded_list_status_text_len: Option<Length>,
        encoded_list_status_text: Option<Data>,
        transact_time: Option<UTCTimestamp>,
        tot_no_orders: FIXInt,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cum_qty: Qty,
        ord_status: OrdStatus,
        working_indicator: Option<WorkingIndicator>,
        leaves_qty: Qty,
        cxl_qty: Qty,
        avg_px: Price,
        ord_rej_reason: Option<OrdRejReason>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// AllocationAck message. Message code: P
    AllocationAck {
        parties: Option<Parties>,
        alloc_id: FIXString,
        trade_date: LocalMktDate,
        transact_time: Option<UTCTimestamp>,
        alloc_status: AllocStatus,
        alloc_rej_code: Option<AllocRejCode>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        legal_confirm: Option<LegalConfirm>
    },

    /// DontKnowTrade message. Message code: Q
    DontKnowTrade {
        order_id: FIXString,
        exec_id: FIXString,
        dk_reason: DKReason,
        instrument: Instrument,
        side: Side,
        order_qty_data: OrderQtyData,
        last_qty: Option<Qty>,
        last_px: Option<Price>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// QuoteRequest message. Message code: R
    QuoteRequest {
        quote_req_id: FIXString,
        rfq_req_id: Option<FIXString>,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        quote_request_type: Option<QuoteRequestType>,
        quote_type: Option<QuoteType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        trade_origination_date: Option<UTCDateOnly>,
        stipulations: Option<Stipulations>,
        side: Option<Side>,
        quantity_type: Option<QuantityType>,
        order_qty: Option<Qty>,
        cash_order_qty: Option<Qty>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        ord_type: Option<OrdType>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        expire_time: Option<UTCTimestamp>,
        transact_time: Option<UTCTimestamp>,
        currency: Option<Currency>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        price_type: Option<PriceType>,
        price: Option<Price>,
        price2: Option<Price>,
        yield_data: Option<YieldData>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// Quote message. Message code: S
    Quote {
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_type: Option<QuoteType>,
        quote_response_level: Option<QuoteResponseLevel>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Instrument,
        bid_px: Option<Price>,
        offer_px: Option<Price>,
        mkt_bid_px: Option<Price>,
        mkt_offer_px: Option<Price>,
        min_bid_size: Option<Qty>,
        bid_size: Option<Qty>,
        min_offer_size: Option<Qty>,
        offer_size: Option<Qty>,
        valid_until_time: Option<UTCTimestamp>,
        bid_spot_rate: Option<Price>,
        offer_spot_rate: Option<Price>,
        bid_forward_points: Option<PriceOffset>,
        offer_forward_points: Option<PriceOffset>,
        mid_px: Option<Price>,
        bid_yield: Option<Percentage>,
        mid_yield: Option<Percentage>,
        offer_yield: Option<Percentage>,
        transact_time: Option<UTCTimestamp>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        ord_type: Option<OrdType>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        bid_forward_points2: Option<PriceOffset>,
        offer_forward_points2: Option<PriceOffset>,
        currency: Option<Currency>,
        settl_curr_bid_fx_rate: Option<FIXFloat>,
        settl_curr_offer_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        commission: Option<Amt>,
        comm_type: Option<CommType>,
        cust_order_capacity: Option<FIXInt>,
        ex_destination: Option<MICExchange>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// SettlementInstructions message. Message code: T
    SettlementInstructions {
        settl_inst_id: FIXString,
        settl_inst_trans_type: SettlInstTransType,
        settl_inst_ref_id: FIXString,
        settl_inst_mode: SettlInstMode,
        settl_inst_source: SettlInstSource,
        alloc_account: FIXString,
        individual_alloc_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        trade_date: Option<LocalMktDate>,
        alloc_id: Option<FIXString>,
        last_mkt: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        side: Option<Side>,
        security_type: Option<SecurityType>,
        effective_time: Option<UTCTimestamp>,
        transact_time: UTCTimestamp,
        parties: Option<Parties>,
        stand_inst_db_type: Option<StandInstDbType>,
        stand_inst_db_name: Option<FIXString>,
        stand_inst_db_id: Option<FIXString>,
        settl_delivery_type: Option<SettlDeliveryType>,
        settl_depository_code: Option<FIXString>,
        settl_brkr_code: Option<FIXString>,
        settl_inst_code: Option<FIXString>,
        security_settl_agent_name: Option<FIXString>,
        security_settl_agent_code: Option<FIXString>,
        security_settl_agent_acct_num: Option<FIXString>,
        security_settl_agent_acct_name: Option<FIXString>,
        security_settl_agent_contact_name: Option<FIXString>,
        security_settl_agent_contact_phone: Option<FIXString>,
        cash_settl_agent_name: Option<FIXString>,
        cash_settl_agent_code: Option<FIXString>,
        cash_settl_agent_acct_num: Option<FIXString>,
        cash_settl_agent_acct_name: Option<FIXString>,
        cash_settl_agent_contact_name: Option<FIXString>,
        cash_settl_agent_contact_phone: Option<FIXString>,
        payment_method: Option<PaymentMethod>,
        payment_ref: Option<FIXString>,
        card_holder_name: Option<FIXString>,
        card_number: Option<FIXString>,
        card_start_date: Option<LocalMktDate>,
        card_exp_date: Option<LocalMktDate>,
        card_iss_no: Option<FIXString>,
        payment_date: Option<LocalMktDate>,
        payment_remitter_id: Option<FIXString>
    },

    /// MarketDataRequest message. Message code: V
    MarketDataRequest {
        md_req_id: FIXString,
        subscription_request_type: SubscriptionRequestType,
        market_depth: FIXInt,
        md_update_type: Option<MDUpdateType>,
        aggregated_book: Option<AggregatedBook>,
        open_close_settle_flag: Option<OpenCloseSettleFlag>,
        scope: Option<Scope>,
        md_implicit_delete: Option<MDImplicitDelete>,
        md_entry_type: MDEntryType,
        instrument: Instrument,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>
    },

    /// MarketDataSnapshotFullRefresh message. Message code: W
    MarketDataSnapshotFullRefresh {
        md_req_id: Option<FIXString>,
        instrument: Instrument,
        financial_status: Option<FinancialStatus>,
        corporate_action: Option<CorporateAction>,
        total_volume_traded: Option<Qty>,
        total_volume_traded_date: Option<UTCDateOnly>,
        total_volume_traded_time: Option<UTCTimeOnly>,
        net_chg_prev_day: Option<PriceOffset>,
        md_entry_type: MDEntryType,
        md_entry_px: Option<Price>,
        currency: Option<Currency>,
        md_entry_size: Option<Qty>,
        md_entry_date: Option<UTCDateOnly>,
        md_entry_time: Option<UTCTimeOnly>,
        tick_direction: Option<TickDirection>,
        md_mkt: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        quote_condition: Option<QuoteCondition>,
        trade_condition: Option<TradeCondition>,
        md_entry_originator: Option<FIXString>,
        location_id: Option<FIXString>,
        desk_id: Option<FIXString>,
        open_close_settle_flag: Option<OpenCloseSettleFlag>,
        time_in_force: Option<TimeInForce>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        min_qty: Option<Qty>,
        exec_inst: Option<ExecInst>,
        seller_days: Option<FIXInt>,
        order_id: Option<FIXString>,
        quote_entry_id: Option<FIXString>,
        md_entry_buyer: Option<FIXString>,
        md_entry_seller: Option<FIXString>,
        number_of_orders: Option<FIXInt>,
        md_entry_position_no: Option<FIXInt>,
        scope: Option<Scope>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// MarketDataIncrementalRefresh message. Message code: X
    MarketDataIncrementalRefresh {
        md_req_id: Option<FIXString>,
        md_update_action: MDUpdateAction,
        delete_reason: Option<DeleteReason>,
        md_entry_type: Option<MDEntryType>,
        md_entry_id: Option<FIXString>,
        md_entry_ref_id: Option<FIXString>,
        instrument: Option<Instrument>,
        financial_status: Option<FinancialStatus>,
        corporate_action: Option<CorporateAction>,
        md_entry_px: Option<Price>,
        currency: Option<Currency>,
        md_entry_size: Option<Qty>,
        md_entry_date: Option<UTCDateOnly>,
        md_entry_time: Option<UTCTimeOnly>,
        tick_direction: Option<TickDirection>,
        md_mkt: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        quote_condition: Option<QuoteCondition>,
        trade_condition: Option<TradeCondition>,
        md_entry_originator: Option<FIXString>,
        location_id: Option<FIXString>,
        desk_id: Option<FIXString>,
        open_close_settle_flag: Option<OpenCloseSettleFlag>,
        time_in_force: Option<TimeInForce>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        min_qty: Option<Qty>,
        exec_inst: Option<ExecInst>,
        seller_days: Option<FIXInt>,
        order_id: Option<FIXString>,
        quote_entry_id: Option<FIXString>,
        md_entry_buyer: Option<FIXString>,
        md_entry_seller: Option<FIXString>,
        number_of_orders: Option<FIXInt>,
        md_entry_position_no: Option<FIXInt>,
        scope: Option<Scope>,
        total_volume_traded: Option<Qty>,
        total_volume_traded_date: Option<UTCDateOnly>,
        total_volume_traded_time: Option<UTCTimeOnly>,
        net_chg_prev_day: Option<PriceOffset>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// MarketDataRequestReject message. Message code: Y
    MarketDataRequestReject {
        md_req_id: FIXString,
        md_req_rej_reason: Option<MDReqRejReason>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// QuoteCancel message. Message code: Z
    QuoteCancel {
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_cancel_type: QuoteCancelType,
        quote_response_level: Option<QuoteResponseLevel>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Option<Instrument>
    },

    /// QuoteStatusRequest message. Message code: a
    QuoteStatusRequest {
        quote_status_req_id: Option<FIXString>,
        quote_id: Option<FIXString>,
        instrument: Instrument,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// MassQuoteAcknowledgement message. Message code: b
    MassQuoteAcknowledgement {
        quote_req_id: Option<FIXString>,
        quote_id: Option<FIXString>,
        quote_status: QuoteStatus,
        quote_reject_reason: Option<QuoteRejectReason>,
        quote_response_level: Option<QuoteResponseLevel>,
        quote_type: Option<QuoteType>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        text: Option<FIXString>,
        quote_set_id: Option<FIXString>,
        underlying_instrument: Option<UnderlyingInstrument>,
        tot_quote_entries: Option<FIXInt>,
        quote_entry_id: Option<FIXString>,
        instrument: Option<Instrument>,
        bid_px: Option<Price>,
        offer_px: Option<Price>,
        bid_size: Option<Qty>,
        offer_size: Option<Qty>,
        valid_until_time: Option<UTCTimestamp>,
        bid_spot_rate: Option<Price>,
        offer_spot_rate: Option<Price>,
        bid_forward_points: Option<PriceOffset>,
        offer_forward_points: Option<PriceOffset>,
        mid_px: Option<Price>,
        bid_yield: Option<Percentage>,
        mid_yield: Option<Percentage>,
        offer_yield: Option<Percentage>,
        transact_time: Option<UTCTimestamp>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        fut_sett_date: Option<LocalMktDate>,
        ord_type: Option<OrdType>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        bid_forward_points2: Option<PriceOffset>,
        offer_forward_points2: Option<PriceOffset>,
        currency: Option<Currency>,
        quote_entry_reject_reason: Option<FIXInt>
    },

    /// SecurityDefinitionRequest message. Message code: c
    SecurityDefinitionRequest {
        security_req_id: FIXString,
        security_request_type: SecurityRequestType,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument_leg: Option<InstrumentLeg>,
        leg_currency: Option<Currency>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// SecurityDefinition message. Message code: d
    SecurityDefinition {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_response_type: SecurityResponseType,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        instrument_leg: Option<InstrumentLeg>,
        leg_currency: Option<Currency>,
        round_lot: Option<Qty>,
        min_trade_vol: Option<Qty>
    },

    /// SecurityStatusRequest message. Message code: e
    SecurityStatusRequest {
        security_status_req_id: FIXString,
        instrument: Instrument,
        currency: Option<Currency>,
        subscription_request_type: SubscriptionRequestType,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>
    },

    /// SecurityStatus message. Message code: f
    SecurityStatus {
        security_status_req_id: Option<FIXString>,
        instrument: Instrument,
        currency: Option<Currency>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        unsolicited_indicator: Option<UnsolicitedIndicator>,
        security_trading_status: Option<SecurityTradingStatus>,
        financial_status: Option<FinancialStatus>,
        corporate_action: Option<CorporateAction>,
        halt_reason_char: Option<HaltReasonChar>,
        in_view_of_common: Option<InViewOfCommon>,
        due_to_related: Option<DueToRelated>,
        buy_volume: Option<Qty>,
        sell_volume: Option<Qty>,
        high_px: Option<Price>,
        low_px: Option<Price>,
        last_px: Option<Price>,
        transact_time: Option<UTCTimestamp>,
        adjustment: Option<Adjustment>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// TradingSessionStatusRequest message. Message code: g
    TradingSessionStatusRequest {
        trad_ses_req_id: FIXString,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        trad_ses_method: Option<TradSesMethod>,
        trad_ses_mode: Option<TradSesMode>,
        subscription_request_type: SubscriptionRequestType
    },

    /// TradingSessionStatus message. Message code: h
    TradingSessionStatus {
        trad_ses_req_id: Option<FIXString>,
        trading_session_id: FIXString,
        trading_session_sub_id: Option<FIXString>,
        trad_ses_method: Option<TradSesMethod>,
        trad_ses_mode: Option<TradSesMode>,
        unsolicited_indicator: Option<UnsolicitedIndicator>,
        trad_ses_status: TradSesStatus,
        trad_ses_status_rej_reason: Option<TradSesStatusRejReason>,
        trad_ses_start_time: Option<UTCTimestamp>,
        trad_ses_open_time: Option<UTCTimestamp>,
        trad_ses_pre_close_time: Option<UTCTimestamp>,
        trad_ses_close_time: Option<UTCTimestamp>,
        trad_ses_end_time: Option<UTCTimestamp>,
        total_volume_traded: Option<Qty>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// MassQuote message. Message code: i
    MassQuote {
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_type: Option<QuoteType>,
        quote_response_level: Option<QuoteResponseLevel>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        def_bid_size: Option<Qty>,
        def_offer_size: Option<Qty>,
        quote_set_id: FIXString,
        underlying_instrument: Option<UnderlyingInstrument>,
        quote_set_valid_until_time: Option<UTCTimestamp>,
        tot_quote_entries: FIXInt,
        quote_entry_id: FIXString,
        instrument: Option<Instrument>,
        bid_px: Option<Price>,
        offer_px: Option<Price>,
        bid_size: Option<Qty>,
        offer_size: Option<Qty>,
        valid_until_time: Option<UTCTimestamp>,
        bid_spot_rate: Option<Price>,
        offer_spot_rate: Option<Price>,
        bid_forward_points: Option<PriceOffset>,
        offer_forward_points: Option<PriceOffset>,
        mid_px: Option<Price>,
        bid_yield: Option<Percentage>,
        mid_yield: Option<Percentage>,
        offer_yield: Option<Percentage>,
        transact_time: Option<UTCTimestamp>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        fut_sett_date: Option<LocalMktDate>,
        ord_type: Option<OrdType>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        bid_forward_points2: Option<PriceOffset>,
        offer_forward_points2: Option<PriceOffset>,
        currency: Option<Currency>
    },

    /// BusinessMessageReject message. Message code: j
    BusinessMessageReject {
        ref_seq_num: Option<SeqNum>,
        ref_msg_type: FIXString,
        business_reject_ref_id: Option<FIXString>,
        business_reject_reason: BusinessRejectReason,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// BidRequest message. Message code: k
    BidRequest {
        bid_id: Option<FIXString>,
        client_bid_id: FIXString,
        bid_request_trans_type: BidRequestTransType,
        list_name: Option<FIXString>,
        total_num_securities: FIXInt,
        bid_type: BidType,
        num_tickets: Option<FIXInt>,
        currency: Option<Currency>,
        side_value1: Option<Amt>,
        side_value2: Option<Amt>,
        bid_descriptor_type: Option<BidDescriptorType>,
        bid_descriptor: Option<FIXString>,
        side_value_ind: Option<SideValueInd>,
        liquidity_value: Option<Amt>,
        liquidity_num_securities: Option<FIXInt>,
        liquidity_pct_low: Option<Percentage>,
        liquidity_pct_high: Option<Percentage>,
        efp_tracking_error: Option<Percentage>,
        fair_value: Option<Amt>,
        outside_index_pct: Option<Percentage>,
        value_of_futures: Option<Amt>,
        list_id: Option<FIXString>,
        side: Option<Side>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        net_gross_ind: Option<NetGrossInd>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        account: Option<FIXString>,
        liquidity_ind_type: Option<LiquidityIndType>,
        wt_average_liquidity: Option<Percentage>,
        exchange_for_physical: Option<ExchangeForPhysical>,
        out_main_cntry_u_index: Option<Amt>,
        cross_percent: Option<Percentage>,
        prog_rpt_reqs: Option<ProgRptReqs>,
        prog_period_interval: Option<FIXInt>,
        inc_tax_ind: Option<IncTaxInd>,
        forex_req: Option<ForexReq>,
        num_bidders: Option<FIXInt>,
        trade_date: Option<LocalMktDate>,
        trade_type: TradeType,
        basis_px_type: BasisPxType,
        strike_time: Option<UTCTimestamp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// BidResponse message. Message code: l
    BidResponse {
        bid_id: Option<FIXString>,
        client_bid_id: Option<FIXString>,
        commission_data: CommissionData,
        list_id: Option<FIXString>,
        country: Option<Country>,
        side: Option<Side>,
        price: Option<Price>,
        price_type: Option<PriceType>,
        fair_value: Option<Amt>,
        net_gross_ind: Option<NetGrossInd>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// ListStrikePrice message. Message code: m
    ListStrikePrice {
        list_id: FIXString,
        tot_no_strikes: FIXInt,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        cl_ord_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        side: Option<Side>,
        price: Price,
        currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// XMLnonFIX message. Message code: n
    XMLnonFIX,

    /// RegistrationInstructions message. Message code: o
    RegistrationInstructions {
        regist_id: FIXString,
        regist_trans_type: RegistTransType,
        regist_ref_id: FIXString,
        cl_ord_id: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        regist_acct_type: Option<FIXString>,
        tax_advantage_type: Option<TaxAdvantageType>,
        ownership_type: Option<FIXChar>,
        regist_detls: Option<FIXString>,
        regist_email: Option<FIXString>,
        mailing_dtls: Option<FIXString>,
        mailing_inst: Option<FIXString>,
        nested_parties: Option<NestedParties>,
        owner_type: Option<OwnerType>,
        date_of_birth: Option<LocalMktDate>,
        investor_country_of_residence: Option<Country>,
        distrib_payment_method: Option<FIXInt>,
        distrib_percentage: Option<Percentage>,
        cash_distrib_curr: Option<Currency>,
        cash_distrib_agent_name: Option<FIXString>,
        cash_distrib_agent_code: Option<FIXString>,
        cash_distrib_agent_acct_number: Option<FIXString>,
        cash_distrib_pay_ref: Option<FIXString>
    },

    /// RegistrationInstructionsResponse message. Message code: p
    RegistrationInstructionsResponse {
        regist_id: FIXString,
        regist_trans_type: RegistTransType,
        regist_ref_id: FIXString,
        cl_ord_id: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        regist_status: RegistStatus,
        regist_rej_reason_code: Option<RegistRejReasonCode>,
        regist_rej_reason_text: Option<FIXString>
    },

    /// OrderMassCancelRequest message. Message code: q
    OrderMassCancelRequest {
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        mass_cancel_request_type: MassCancelRequestType,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Option<Instrument>,
        underlying_instrument: Option<UnderlyingInstrument>,
        side: Option<Side>,
        transact_time: UTCTimestamp,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// OrderMassCancelReport message. Message code: r
    OrderMassCancelReport {
        cl_ord_id: Option<FIXString>,
        secondary_cl_ord_id: Option<FIXString>,
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        mass_cancel_request_type: MassCancelRequestType,
        mass_cancel_response: MassCancelResponse,
        mass_cancel_reject_reason: Option<MassCancelRejectReason>,
        total_affected_orders: Option<FIXInt>,
        orig_cl_ord_id: Option<FIXString>,
        affected_order_id: Option<FIXString>,
        affected_secondary_order_id: Option<FIXString>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Option<Instrument>,
        underlying_instrument: Option<UnderlyingInstrument>,
        side: Option<Side>,
        transact_time: Option<UTCTimestamp>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// NewOrderCross message. Message code: s
    NewOrderCross {
        cross_id: FIXString,
        cross_type: CrossType,
        cross_prioritization: CrossPrioritization,
        side: Side,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        trade_origination_date: Option<UTCDateOnly>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_account: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        nested_parties: Option<NestedParties>,
        alloc_qty: Option<Qty>,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        solicited_flag: Option<SolicitedFlag>,
        side_compliance_id: Option<FIXString>,
        instrument: Instrument,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        handl_inst: HandlInst,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        process_code: Option<ProcessCode>,
        prev_close_px: Option<Price>,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        stipulations: Option<Stipulations>,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        io_iid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        max_show: Option<Qty>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        net_money: Option<Amt>
    },

    /// CrossOrderCancelRequest message. Message code: u
    CrossOrderCancelRequest {
        order_id: Option<FIXString>,
        cross_id: FIXString,
        orig_cross_id: FIXString,
        cross_type: CrossType,
        cross_prioritization: CrossPrioritization,
        side: Side,
        orig_cl_ord_id: FIXString,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        parties: Option<Parties>,
        trade_origination_date: Option<UTCDateOnly>,
        order_qty_data: OrderQtyData,
        compliance_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        instrument: Instrument,
        transact_time: UTCTimestamp
    },

    /// CrossOrderCancelReplaceRequest message. Message code: t
    CrossOrderCancelReplaceRequest {
        order_id: Option<FIXString>,
        cross_id: FIXString,
        orig_cross_id: FIXString,
        cross_type: CrossType,
        cross_prioritization: CrossPrioritization,
        side: Side,
        orig_cl_ord_id: FIXString,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        parties: Option<Parties>,
        trade_origination_date: Option<UTCDateOnly>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_account: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        nested_parties: Option<NestedParties>,
        alloc_qty: Option<Qty>,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        solicited_flag: Option<SolicitedFlag>,
        side_compliance_id: Option<FIXString>,
        instrument: Instrument,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        handl_inst: HandlInst,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        process_code: Option<ProcessCode>,
        prev_close_px: Option<Price>,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        stipulations: Option<Stipulations>,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        yield_data: Option<YieldData>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        io_iid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        max_show: Option<Qty>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        net_money: Option<Amt>
    },

    /// SecurityTypeRequest message. Message code: v
    SecurityTypeRequest {
        security_req_id: FIXString,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>
    },

    /// SecurityTypes message. Message code: w
    SecurityTypes {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_response_type: SecurityResponseType,
        total_num_security_types: Option<FIXInt>,
        security_type: Option<SecurityType>,
        product: Option<Product>,
        cfi_code: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// SecurityListRequest message. Message code: x
    SecurityListRequest {
        security_req_id: FIXString,
        security_list_request_type: SecurityListRequestType,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// SecurityList message. Message code: y
    SecurityList {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_request_result: SecurityRequestResult,
        total_num_securities: Option<FIXInt>,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        instrument_leg: Option<InstrumentLeg>,
        leg_currency: Option<Currency>,
        round_lot: Option<Qty>,
        min_trade_vol: Option<Qty>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// DerivativeSecurityListRequest message. Message code: z
    DerivativeSecurityListRequest {
        security_req_id: FIXString,
        security_list_request_type: SecurityListRequestType,
        underlying_instrument: Option<UnderlyingInstrument>,
        currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// DerivativeSecurityList message. Message code: AA
    DerivativeSecurityList {
        security_req_id: FIXString,
        security_response_id: FIXString,
        security_request_result: SecurityRequestResult,
        underlying_instrument: Option<UnderlyingInstrument>,
        total_num_securities: Option<FIXInt>,
        instrument: Option<Instrument>,
        currency: Option<Currency>,
        instrument_leg: Option<InstrumentLeg>,
        leg_currency: Option<Currency>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// NewOrderMultileg message. Message code: AB
    NewOrderMultileg {
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_account: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        alloc_qty: Option<Qty>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: HandlInst,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        process_code: Option<ProcessCode>,
        side: Side,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        instrument_leg: Option<InstrumentLeg>,
        leg_position_effect: Option<FIXChar>,
        leg_covered_or_uncovered: Option<FIXInt>,
        nested_parties: Option<NestedParties>,
        leg_ref_id: Option<FIXString>,
        leg_price: Option<Price>,
        leg_settlmnt_typ: Option<FIXChar>,
        leg_fut_sett_date: Option<LocalMktDate>,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        io_iid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        multi_leg_rpt_type_req: Option<FIXInt>,
        net_money: Option<Amt>
    },

    /// MultilegOrderCancelReplaceRequest message. Message code: AC
    MultilegOrderCancelReplaceRequest {
        order_id: Option<FIXString>,
        orig_cl_ord_id: FIXString,
        cl_ord_id: FIXString,
        secondary_cl_ord_id: Option<FIXString>,
        cl_ord_link_id: Option<FIXString>,
        orig_ord_mod_time: Option<UTCTimestamp>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        day_booking_inst: Option<DayBookingInst>,
        booking_unit: Option<BookingUnit>,
        prealloc_method: Option<PreallocMethod>,
        alloc_account: Option<FIXString>,
        individual_alloc_id: Option<FIXString>,
        alloc_qty: Option<Qty>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        cash_margin: Option<CashMargin>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        handl_inst: HandlInst,
        exec_inst: Option<ExecInst>,
        min_qty: Option<Qty>,
        max_floor: Option<Qty>,
        ex_destination: Option<MICExchange>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        process_code: Option<ProcessCode>,
        side: Side,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        instrument_leg: Option<InstrumentLeg>,
        leg_position_effect: Option<FIXChar>,
        leg_covered_or_uncovered: Option<FIXInt>,
        nested_parties: Option<NestedParties>,
        leg_ref_id: Option<FIXString>,
        leg_price: Option<Price>,
        leg_settlmnt_typ: Option<FIXChar>,
        leg_fut_sett_date: Option<LocalMktDate>,
        locate_reqd: Option<LocateReqd>,
        transact_time: UTCTimestamp,
        quantity_type: Option<QuantityType>,
        order_qty_data: OrderQtyData,
        ord_type: OrdType,
        price_type: Option<PriceType>,
        price: Option<Price>,
        stop_px: Option<Price>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        io_iid: Option<FIXString>,
        quote_id: Option<FIXString>,
        time_in_force: Option<TimeInForce>,
        effective_time: Option<UTCTimestamp>,
        expire_date: Option<LocalMktDate>,
        expire_time: Option<UTCTimestamp>,
        gt_booking_inst: Option<GTBookingInst>,
        commission_data: Option<CommissionData>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        forex_req: Option<ForexReq>,
        settl_currency: Option<Currency>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        position_effect: Option<PositionEffect>,
        covered_or_uncovered: Option<CoveredOrUncovered>,
        max_show: Option<Qty>,
        peg_difference: Option<PriceOffset>,
        discretion_inst: Option<DiscretionInst>,
        discretion_offset: Option<PriceOffset>,
        cancellation_rights: Option<CancellationRights>,
        money_laundering_status: Option<MoneyLaunderingStatus>,
        regist_id: Option<FIXString>,
        designation: Option<FIXString>,
        multi_leg_rpt_type_req: Option<FIXInt>,
        net_money: Option<Amt>
    },

    /// TradeCaptureReportRequest message. Message code: AD
    TradeCaptureReportRequest {
        trade_request_id: FIXString,
        trade_request_type: TradeRequestType,
        subscription_request_type: Option<SubscriptionRequestType>,
        exec_id: Option<FIXString>,
        order_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        match_status: Option<MatchStatus>,
        parties: Option<Parties>,
        instrument: Option<Instrument>,
        trade_date: Option<LocalMktDate>,
        transact_time: Option<UTCTimestamp>,
        side: Option<Side>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        trade_input_source: Option<FIXString>,
        trade_input_device: Option<FIXString>
    },

    /// TradeCaptureReport message. Message code: AE
    TradeCaptureReport {
        trade_report_id: FIXString,
        trade_report_trans_type: Option<TradeReportTransType>,
        trade_request_id: Option<FIXString>,
        exec_type: ExecType,
        trade_report_ref_id: Option<FIXString>,
        exec_id: Option<FIXString>,
        secondary_exec_id: Option<FIXString>,
        exec_restatement_reason: Option<ExecRestatementReason>,
        previously_reported: PreviouslyReported,
        instrument: Instrument,
        order_qty_data: Option<OrderQtyData>,
        last_qty: Qty,
        last_px: Price,
        last_spot_rate: Option<Price>,
        last_forward_points: Option<PriceOffset>,
        last_mkt: Option<MICExchange>,
        trade_date: LocalMktDate,
        transact_time: UTCTimestamp,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        match_status: Option<MatchStatus>,
        match_type: Option<MatchType>,
        side: Side,
        order_id: FIXString,
        secondary_order_id: Option<FIXString>,
        cl_ord_id: Option<FIXString>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        process_code: Option<ProcessCode>,
        odd_lot: Option<FIXBoolean>,
        clearing_instruction: Option<ClearingInstruction>,
        clearing_fee_indicator: Option<ClearingFeeIndicator>,
        trade_input_source: Option<FIXString>,
        trade_input_device: Option<FIXString>,
        currency: Option<Currency>,
        compliance_id: Option<FIXString>,
        solicited_flag: Option<SolicitedFlag>,
        order_capacity: Option<OrderCapacity>,
        order_restrictions: Option<OrderRestrictions>,
        cust_order_capacity: Option<FIXInt>,
        trans_bkd_time: Option<UTCTimestamp>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        commission_data: Option<CommissionData>,
        gross_trade_amt: Option<Amt>,
        num_days_interest: Option<FIXInt>,
        ex_date: Option<UTCDateOnly>,
        accrued_interest_rate: Option<Percentage>,
        accrued_interest_amt: Option<Amt>,
        concession: Option<Amt>,
        total_takedown: Option<Amt>,
        net_money: Option<Amt>,
        settl_curr_amt: Option<Amt>,
        settl_currency: Option<Currency>,
        settl_curr_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        position_effect: Option<PositionEffect>,
        text: Option<FIXString>,
        encoded_text: Option<Data>,
        multi_leg_reporting_type: Option<MultiLegReportingType>,
        cont_amt_type: Option<ContAmtType>,
        cont_amt_value: Option<FIXFloat>,
        cont_amt_curr: Option<Currency>,
        misc_fee_amt: Option<Amt>,
        misc_fee_curr: Option<Currency>,
        misc_fee_type: Option<MiscFeeType>
    },

    /// OrderMassStatusRequest message. Message code: AF
    OrderMassStatusRequest {
        mass_status_req_id: FIXString,
        mass_status_req_type: MassStatusReqType,
        parties: Option<Parties>,
        account: Option<FIXString>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Option<Instrument>,
        underlying_instrument: Option<UnderlyingInstrument>,
        side: Option<Side>
    },

    /// QuoteRequestReject message. Message code: AG
    QuoteRequestReject {
        quote_req_id: FIXString,
        rfq_req_id: Option<FIXString>,
        quote_request_reject_reason: QuoteRequestRejectReason,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        quote_request_type: Option<QuoteRequestType>,
        quote_type: Option<QuoteType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        trade_origination_date: Option<UTCDateOnly>,
        stipulations: Option<Stipulations>,
        side: Option<Side>,
        quantity_type: Option<QuantityType>,
        order_qty: Option<Qty>,
        cash_order_qty: Option<Qty>,
        settlmnt_typ: Option<SettlmntTyp>,
        fut_sett_date: Option<LocalMktDate>,
        ord_type: Option<OrdType>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        expire_time: Option<UTCTimestamp>,
        transact_time: Option<UTCTimestamp>,
        currency: Option<Currency>,
        spread_or_benchmark_curve_data: Option<SpreadOrBenchmarkCurveData>,
        price_type: Option<PriceType>,
        price: Option<Price>,
        price2: Option<Price>,
        yield_data: Option<YieldData>,
        text: Option<FIXString>,
        encoded_text: Option<Data>
    },

    /// RFQRequest message. Message code: AH
    RFQRequest {
        rfq_req_id: FIXString,
        instrument: Instrument,
        prev_close_px: Option<Price>,
        quote_request_type: Option<QuoteRequestType>,
        quote_type: Option<QuoteType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        subscription_request_type: Option<SubscriptionRequestType>
    },

    /// QuoteStatusReport message. Message code: AI
    QuoteStatusReport {
        quote_status_req_id: Option<FIXString>,
        quote_req_id: Option<FIXString>,
        quote_id: FIXString,
        quote_type: Option<QuoteType>,
        parties: Option<Parties>,
        account: Option<FIXString>,
        account_type: Option<AccountType>,
        trading_session_id: Option<FIXString>,
        trading_session_sub_id: Option<FIXString>,
        instrument: Instrument,
        bid_px: Option<Price>,
        offer_px: Option<Price>,
        mkt_bid_px: Option<Price>,
        mkt_offer_px: Option<Price>,
        min_bid_size: Option<Qty>,
        bid_size: Option<Qty>,
        min_offer_size: Option<Qty>,
        offer_size: Option<Qty>,
        valid_until_time: Option<UTCTimestamp>,
        bid_spot_rate: Option<Price>,
        offer_spot_rate: Option<Price>,
        bid_forward_points: Option<PriceOffset>,
        offer_forward_points: Option<PriceOffset>,
        mid_px: Option<Price>,
        bid_yield: Option<Percentage>,
        mid_yield: Option<Percentage>,
        offer_yield: Option<Percentage>,
        transact_time: Option<UTCTimestamp>,
        fut_sett_date: Option<LocalMktDate>,
        ord_type: Option<OrdType>,
        fut_sett_date2: Option<LocalMktDate>,
        order_qty2: Option<Qty>,
        bid_forward_points2: Option<PriceOffset>,
        offer_forward_points2: Option<PriceOffset>,
        currency: Option<Currency>,
        settl_curr_bid_fx_rate: Option<FIXFloat>,
        settl_curr_offer_fx_rate: Option<FIXFloat>,
        settl_curr_fx_rate_calc: Option<SettlCurrFxRateCalc>,
        commission: Option<Amt>,
        comm_type: Option<CommType>,
        cust_order_capacity: Option<FIXInt>,
        ex_destination: Option<MICExchange>,
        quote_status: Option<QuoteStatus>
    }
}